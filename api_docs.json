{
    "openapi": "3.0.0",
    "info": {
        "title": "Blexi API Documentation",
        "description": "API documentation for Blexi application",
        "contact": {
            "name": "Blexi Support",
            "email": "info@blexi.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://api.blexi.co",
            "description": "Production API Server"
        },
        {
            "url": "http://localhost",
            "description": "Local Development Server"
        }
    ],
    "paths": {
        "/api/v1/addresses": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get a paginated list of addresses",
                "description": "Returns a paginated list of addresses with optional filtering",
                "operationId": "listAddresses",
                "parameters": [
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Filter by country ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "province_id",
                        "in": "query",
                        "description": "Filter by province ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "district_id",
                        "in": "query",
                        "description": "Filter by district ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "address_type",
                        "in": "query",
                        "description": "Filter by address type (home, work, other)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "home",
                                "work",
                                "other"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (active, inactive)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AddressResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Create a new address",
                "description": "Creates a new address and associates it with an entity",
                "operationId": "createAddress",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "country_id",
                                    "province_id",
                                    "district_id",
                                    "address_type",
                                    "addressable_type",
                                    "addressable_id"
                                ],
                                "properties": {
                                    "country_id": {
                                        "description": "Country ID",
                                        "type": "integer"
                                    },
                                    "province_id": {
                                        "description": "Province ID",
                                        "type": "integer"
                                    },
                                    "district_id": {
                                        "description": "District ID",
                                        "type": "integer"
                                    },
                                    "neighborhood": {
                                        "description": "Neighborhood name",
                                        "type": "string"
                                    },
                                    "street": {
                                        "description": "Street name",
                                        "type": "string"
                                    },
                                    "building_no": {
                                        "description": "Building number",
                                        "type": "string"
                                    },
                                    "apartment_no": {
                                        "description": "Apartment number",
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "description": "Postal code",
                                        "type": "string"
                                    },
                                    "address_type": {
                                        "description": "Address type",
                                        "type": "string",
                                        "enum": [
                                            "home",
                                            "work",
                                            "other"
                                        ]
                                    },
                                    "is_default": {
                                        "description": "Whether this is the default address",
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "status": {
                                        "description": "Address status",
                                        "type": "string",
                                        "default": "active",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    },
                                    "addressable_type": {
                                        "description": "Entity type (e.g., 'App\\\\Modules\\\\Guest\\\\Models\\\\Guest')",
                                        "type": "string"
                                    },
                                    "addressable_id": {
                                        "description": "Entity ID",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/AddressResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/{id}": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get a specific address",
                "description": "Returns a specific address by ID with its relationships",
                "operationId": "getAddress",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/AddressResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Update an existing address",
                "description": "Updates an existing address with the provided data",
                "operationId": "updateAddress",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "country_id": {
                                        "description": "Country ID",
                                        "type": "integer"
                                    },
                                    "province_id": {
                                        "description": "Province ID",
                                        "type": "integer"
                                    },
                                    "district_id": {
                                        "description": "District ID",
                                        "type": "integer"
                                    },
                                    "neighborhood": {
                                        "description": "Neighborhood name",
                                        "type": "string"
                                    },
                                    "street": {
                                        "description": "Street name",
                                        "type": "string"
                                    },
                                    "building_no": {
                                        "description": "Building number",
                                        "type": "string"
                                    },
                                    "apartment_no": {
                                        "description": "Apartment number",
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "description": "Postal code",
                                        "type": "string"
                                    },
                                    "address_type": {
                                        "description": "Address type",
                                        "type": "string",
                                        "enum": [
                                            "home",
                                            "work",
                                            "other"
                                        ]
                                    },
                                    "is_default": {
                                        "description": "Whether this is the default address",
                                        "type": "boolean"
                                    },
                                    "status": {
                                        "description": "Address status",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/AddressResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Delete an address",
                "description": "Deletes an address by ID",
                "operationId": "deleteAddress",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Address deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/entity/{entityType}/{entityId}": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get addresses for a specific entity",
                "description": "Returns all addresses associated with a specific entity",
                "operationId": "getAddressesForEntity",
                "parameters": [
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "Entity type (e.g., 'App\\\\Modules\\\\Guest\\\\Models\\\\Guest')",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Entity ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AddressResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/{id}/default/{entityType}/{entityId}/{addressType}": {
            "put": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Set an address as default",
                "description": "Sets an address as the default for a specific entity and address type",
                "operationId": "setAddressAsDefault",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "Entity type (e.g., 'App\\\\Modules\\\\Guest\\\\Models\\\\Guest')",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "Entity ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "addressType",
                        "in": "path",
                        "description": "Address type (home, work, other)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "home",
                                "work",
                                "other"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address set as default successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Address set as default successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found or not associated with this entity"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/countries": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a list of all countries",
                "description": "Returns a list of all countries in the system",
                "operationId": "listCountries",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CountryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/countries/{id}": {
            "get": {
                "tags": [
                    "Countries"
                ],
                "summary": "Get a specific country",
                "description": "Returns a specific country by ID",
                "operationId": "getCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Country ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/CountryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Country not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/provinces/{id}/districts": {
            "get": {
                "tags": [
                    "Districts"
                ],
                "summary": "Get a list of districts by province",
                "description": "Returns a list of districts for a specific province",
                "operationId": "listDistrictsByProvince",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Province ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DistrictResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/districts/{id}": {
            "get": {
                "tags": [
                    "Districts"
                ],
                "summary": "Get a specific district",
                "description": "Returns a specific district by ID",
                "operationId": "getDistrict",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "District ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DistrictResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "District not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/countries/{id}/provinces": {
            "get": {
                "tags": [
                    "Provinces"
                ],
                "summary": "Get a list of provinces by country",
                "description": "Returns a list of provinces for a specific country",
                "operationId": "listProvincesByCountry",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Country ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProvinceResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/addresses/provinces/{id}": {
            "get": {
                "tags": [
                    "Provinces"
                ],
                "summary": "Get a specific province",
                "description": "Returns a specific province by ID",
                "operationId": "getProvince",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Province ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ProvinceResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Province not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "description": "Login user with username and password to receive a JWT token",
                "operationId": "cc3ce74cbc12f7b66628d2e40e11b4fb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "Username and password are required for authentication",
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Giriş başarıyla yapıldı."
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                                                },
                                                "user": {
                                                    "$ref": "#/components/schemas/UserResource"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Geçersiz kullanıcı adı veya şifre."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register new user",
                "description": "Create a new user for the current tenant (Requires admin or super-admin role)",
                "operationId": "83da1ddac36195a96fee502f4c6ffef0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "role"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "johndoe"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "role": {
                                        "description": "Available roles: admin (only for super-admin), user",
                                        "type": "string",
                                        "example": "user"
                                    },
                                    "person_id": {
                                        "description": "Optional. ID of a Person record to link to this user",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Kullanıcı başarıyla oluşturuldu."
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "user@example.com"
                                                },
                                                "tenant_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "user"
                                                },
                                                "permissions": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Oturum açmanız gerekiyor."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bu işlemi yapmak için yetkiniz yok."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Doğrulama hatası."
                                        },
                                        "errors": {
                                            "properties": {
                                                "email": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Bu e-posta adresi zaten kullanımda."
                                                    }
                                                },
                                                "role": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Bu rolü atama yetkiniz yok."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/me": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get authenticated user information",
                "description": "Returns detailed information about the currently authenticated user and their associated tenant and person data",
                "operationId": "d04a739faffa2ab89692825e55ef91cd",
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Oturum açılmamış",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Oturum açmanız gerekiyor."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "description": "Invalidate the current user's token",
                "operationId": "e0f2a296d283aab4fb03a970f261b43e",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Oturum başarıyla kapatıldı."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Oturum açmanız gerekiyor."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh token",
                "description": "Get a new token with an extended lifetime",
                "operationId": "fb367a3ea74a783b3eb80ed92ec8b693",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token refreshed successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/permissions": {
            "get": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Get all permissions",
                "description": "Retrieve a list of all permissions",
                "operationId": "c78af699b56d886c9bed9e6ea3bf0c58",
                "responses": {
                    "200": {
                        "description": "List of permissions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "create-user"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Permissions"
                ],
                "summary": "Create new permission",
                "description": "Create a new permission (Super Admin only)",
                "operationId": "18596bb21b9feb26aedb93b6c30fcd5b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "create-post"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Permission created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Permission created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "create-post"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - User is not a super admin",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Forbidden"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/roles": {
            "get": {
                "tags": [
                    "Roles"
                ],
                "summary": "Get all roles",
                "description": "Retrieve a list of all roles",
                "operationId": "c18e20acdb9ae099267354ba8c30b5e8",
                "responses": {
                    "200": {
                        "description": "List of roles retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "admin"
                                                    },
                                                    "permissions": {
                                                        "type": "array",
                                                        "items": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "integer",
                                                                    "example": 1
                                                                },
                                                                "name": {
                                                                    "type": "string",
                                                                    "example": "create-user"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Create new role",
                "description": "Create a new role with specified permissions",
                "operationId": "5e2433f130fa333a071206f421fb1e45",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "editor"
                                    },
                                    "permissions": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Role created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "editor"
                                                },
                                                "permissions": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 1
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "create-post"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/roles/{id}": {
            "put": {
                "tags": [
                    "Roles"
                ],
                "summary": "Update role",
                "description": "Update an existing role",
                "operationId": "4c3c9933d9026d24330fde30a062f1f1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "editor"
                                    },
                                    "permissions": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Role updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Roles"
                ],
                "summary": "Delete role",
                "description": "Delete an existing role",
                "operationId": "4be6189b9e996dacfe70c687370b50fb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Role deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/roles/{id}/permissions": {
            "post": {
                "tags": [
                    "Roles"
                ],
                "summary": "Assign permissions to role",
                "description": "Assign multiple permissions to an existing role",
                "operationId": "dab7b352f2ea767108b57c9b2cfdb120",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "permissions"
                                ],
                                "properties": {
                                    "permissions": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Permissions assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Permissions assigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Role not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "description": "Retrieve a list of all users",
                "operationId": "15e599f890ceb4eca660e587dcaf09fb",
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get a specific user",
                "description": "Retrieve a specific user by ID",
                "operationId": "8a7147285b60b588b8d952c37bd680f8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/UserResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "description": "Soft delete a user (Admin only)",
                "operationId": "f551913b418e1c59537fd30b6d72fcbf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/users/{id}/roles": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Assign roles to a user",
                "description": "Assign roles to a user (Admin only)",
                "operationId": "14d0e4362863590f09e6a2cca1ad532a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "example": "editor"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Role assigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or role not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User or role not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/people": {
            "get": {
                "tags": [
                    "People"
                ],
                "summary": "Get all people",
                "description": "Retrieve a list of all people with optional filters",
                "operationId": "8e86e4c5d9c0516d1e70e5c62ba98795",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter people by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACTIVE",
                                "INACTIVE",
                                "SUSPENDED"
                            ]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter people by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phone",
                        "in": "query",
                        "description": "Filter people by phone",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Filter people by email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "Filter people by city",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Filter people by address",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of people retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "description": "Person's first name",
                                                        "type": "string",
                                                        "example": "John"
                                                    },
                                                    "surname": {
                                                        "description": "Person's last name",
                                                        "type": "string",
                                                        "example": "Doe"
                                                    },
                                                    "tc_no": {
                                                        "description": "Turkish Citizenship Number",
                                                        "type": "string",
                                                        "example": "12345678901"
                                                    },
                                                    "phone": {
                                                        "description": "Phone number",
                                                        "type": "string",
                                                        "example": "+905555555555"
                                                    },
                                                    "email": {
                                                        "description": "Email address",
                                                        "type": "string",
                                                        "example": "john@example.com"
                                                    },
                                                    "birth_date": {
                                                        "description": "Birth date",
                                                        "type": "string",
                                                        "format": "date",
                                                        "example": "1990-01-01"
                                                    },
                                                    "gender": {
                                                        "description": "Person's gender",
                                                        "type": "string",
                                                        "enum": [
                                                            "MALE",
                                                            "FEMALE"
                                                        ],
                                                        "example": "MALE"
                                                    },
                                                    "city": {
                                                        "description": "City",
                                                        "type": "string",
                                                        "example": "Istanbul"
                                                    },
                                                    "status": {
                                                        "type": "string",
                                                        "enum": [
                                                            "ACTIVE",
                                                            "INACTIVE",
                                                            "SUSPENDED"
                                                        ],
                                                        "example": "ACTIVE"
                                                    },
                                                    "address": {
                                                        "$ref": "#/components/schemas/AddressResource"
                                                    },
                                                    "profile_photo_url": {
                                                        "type": "string",
                                                        "example": "http://example.com/storage/profile-photos/abc123.jpg",
                                                        "nullable": true
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    },
                                                    "updated_at": {
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "People"
                ],
                "summary": "Create new person",
                "description": "Create a new person",
                "operationId": "ce502cc41893eb1f5f668e0398743b69",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "surname",
                                    "tc_no",
                                    "phone",
                                    "birth_date"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Person's first name",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "surname": {
                                        "description": "Person's last name",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "tc_no": {
                                        "description": "Turkish Citizenship Number (11 digits)",
                                        "type": "string",
                                        "example": "12345678901"
                                    },
                                    "phone": {
                                        "description": "Phone number",
                                        "type": "string",
                                        "example": "+905555555555"
                                    },
                                    "email": {
                                        "description": "Email address",
                                        "type": "string",
                                        "example": "john@example.com",
                                        "nullable": true
                                    },
                                    "birth_date": {
                                        "description": "Birth date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "gender": {
                                        "description": "Person's gender",
                                        "type": "string",
                                        "enum": [
                                            "MALE",
                                            "FEMALE"
                                        ],
                                        "example": "MALE",
                                        "nullable": true
                                    },
                                    "city": {
                                        "description": "City",
                                        "type": "string",
                                        "example": "Istanbul",
                                        "nullable": true
                                    },
                                    "status": {
                                        "description": "Person status",
                                        "type": "string",
                                        "enum": [
                                            "ACTIVE",
                                            "INACTIVE",
                                            "SUSPENDED"
                                        ],
                                        "example": "ACTIVE"
                                    },
                                    "address": {
                                        "properties": {
                                            "country_id": {
                                                "description": "Country ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "province_id": {
                                                "description": "Province ID",
                                                "type": "integer",
                                                "example": 34
                                            },
                                            "district_id": {
                                                "description": "District ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "neighborhood": {
                                                "description": "Neighborhood name",
                                                "type": "string",
                                                "example": "Caddebostan"
                                            },
                                            "street": {
                                                "description": "Street name",
                                                "type": "string",
                                                "example": "Bağdat Caddesi"
                                            },
                                            "building_no": {
                                                "description": "Building number",
                                                "type": "string",
                                                "example": "123"
                                            },
                                            "apartment_no": {
                                                "description": "Apartment number",
                                                "type": "string",
                                                "example": "4"
                                            },
                                            "postal_code": {
                                                "description": "Postal code",
                                                "type": "string",
                                                "example": "34728"
                                            },
                                            "address_type": {
                                                "description": "Address type",
                                                "type": "string",
                                                "enum": [
                                                    "home",
                                                    "work",
                                                    "other"
                                                ],
                                                "example": "home"
                                            },
                                            "is_default": {
                                                "description": "Whether this is the default address",
                                                "type": "boolean",
                                                "default": false,
                                                "example": true
                                            },
                                            "status": {
                                                "description": "Address status",
                                                "type": "string",
                                                "default": "active",
                                                "enum": [
                                                    "active",
                                                    "inactive"
                                                ],
                                                "example": "active"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Person created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Person created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "example": "john@example.com"
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "+902121234567"
                                                },
                                                "city": {
                                                    "type": "string",
                                                    "example": "Istanbul"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ACTIVE",
                                                        "INACTIVE",
                                                        "SUSPENDED"
                                                    ],
                                                    "example": "ACTIVE"
                                                },
                                                "address": {
                                                    "$ref": "#/components/schemas/AddressResource"
                                                },
                                                "profile_photo_url": {
                                                    "type": "string",
                                                    "example": "http://example.com/storage/profile-photos/abc123.jpg",
                                                    "nullable": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/people/{id}": {
            "get": {
                "tags": [
                    "People"
                ],
                "summary": "Get person by ID",
                "description": "Retrieve a specific person by their ID",
                "operationId": "65e5c4a0900facc638f0f72a20ff9c74",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "description": "Person's first name",
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "surname": {
                                                    "description": "Person's last name",
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "tc_no": {
                                                    "description": "Turkish Citizenship Number",
                                                    "type": "string",
                                                    "example": "12345678901"
                                                },
                                                "phone": {
                                                    "description": "Phone number",
                                                    "type": "string",
                                                    "example": "+905555555555"
                                                },
                                                "email": {
                                                    "description": "Email address",
                                                    "type": "string",
                                                    "example": "john@example.com"
                                                },
                                                "birth_date": {
                                                    "description": "Birth date",
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "1990-01-01"
                                                },
                                                "gender": {
                                                    "description": "Person's gender",
                                                    "type": "string",
                                                    "enum": [
                                                        "MALE",
                                                        "FEMALE"
                                                    ],
                                                    "example": "MALE"
                                                },
                                                "city": {
                                                    "description": "City",
                                                    "type": "string",
                                                    "example": "Istanbul"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ACTIVE",
                                                        "INACTIVE",
                                                        "SUSPENDED"
                                                    ],
                                                    "example": "ACTIVE"
                                                },
                                                "address": {
                                                    "$ref": "#/components/schemas/AddressResource"
                                                },
                                                "profile_photo_url": {
                                                    "type": "string",
                                                    "example": "http://example.com/storage/profile-photos/abc123.jpg",
                                                    "nullable": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "People"
                ],
                "summary": "Update person",
                "description": "Update an existing person",
                "operationId": "7968d93f8e0188a0f70355895c10b090",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Person's first name",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "surname": {
                                        "description": "Person's last name",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "tc_no": {
                                        "description": "Turkish Citizenship Number (11 digits)",
                                        "type": "string",
                                        "example": "12345678901"
                                    },
                                    "phone": {
                                        "description": "Phone number",
                                        "type": "string",
                                        "example": "+905555555555"
                                    },
                                    "email": {
                                        "description": "Email address",
                                        "type": "string",
                                        "example": "john@example.com",
                                        "nullable": true
                                    },
                                    "birth_date": {
                                        "description": "Birth date",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "gender": {
                                        "description": "Person's gender",
                                        "type": "string",
                                        "enum": [
                                            "MALE",
                                            "FEMALE"
                                        ],
                                        "example": "MALE",
                                        "nullable": true
                                    },
                                    "city": {
                                        "description": "City",
                                        "type": "string",
                                        "example": "Istanbul",
                                        "nullable": true
                                    },
                                    "status": {
                                        "description": "Person status",
                                        "type": "string",
                                        "enum": [
                                            "ACTIVE",
                                            "INACTIVE",
                                            "SUSPENDED"
                                        ],
                                        "example": "ACTIVE"
                                    },
                                    "address": {
                                        "properties": {
                                            "country_id": {
                                                "description": "Country ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "province_id": {
                                                "description": "Province ID",
                                                "type": "integer",
                                                "example": 34
                                            },
                                            "district_id": {
                                                "description": "District ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "neighborhood": {
                                                "description": "Neighborhood name",
                                                "type": "string",
                                                "example": "Caddebostan"
                                            },
                                            "street": {
                                                "description": "Street name",
                                                "type": "string",
                                                "example": "Bağdat Caddesi"
                                            },
                                            "building_no": {
                                                "description": "Building number",
                                                "type": "string",
                                                "example": "123"
                                            },
                                            "apartment_no": {
                                                "description": "Apartment number",
                                                "type": "string",
                                                "example": "4"
                                            },
                                            "postal_code": {
                                                "description": "Postal code",
                                                "type": "string",
                                                "example": "34728"
                                            },
                                            "address_type": {
                                                "description": "Address type",
                                                "type": "string",
                                                "enum": [
                                                    "home",
                                                    "work",
                                                    "other"
                                                ],
                                                "example": "home"
                                            },
                                            "is_default": {
                                                "description": "Whether this is the default address",
                                                "type": "boolean",
                                                "default": false,
                                                "example": true
                                            },
                                            "status": {
                                                "description": "Address status",
                                                "type": "string",
                                                "default": "active",
                                                "enum": [
                                                    "active",
                                                    "inactive"
                                                ],
                                                "example": "active"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Person updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Person updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "People"
                ],
                "summary": "Delete person",
                "description": "Delete a person by ID",
                "operationId": "78e2cdb09c3ba7eebbf0324506e79e2c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Person deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Person has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/people/{id}/status": {
            "patch": {
                "tags": [
                    "People"
                ],
                "summary": "Update person status",
                "description": "Update the status of an existing person",
                "operationId": "c3cc724568723050b3f88e364724dbf0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "Person status",
                                        "type": "string",
                                        "enum": [
                                            "ACTIVE",
                                            "INACTIVE",
                                            "SUSPENDED"
                                        ],
                                        "example": "ACTIVE"
                                    },
                                    "address": {
                                        "properties": {
                                            "country_id": {
                                                "description": "Country ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "province_id": {
                                                "description": "Province ID",
                                                "type": "integer",
                                                "example": 34
                                            },
                                            "district_id": {
                                                "description": "District ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "neighborhood": {
                                                "description": "Neighborhood name",
                                                "type": "string",
                                                "example": "Caddebostan"
                                            },
                                            "street": {
                                                "description": "Street name",
                                                "type": "string",
                                                "example": "Bağdat Caddesi"
                                            },
                                            "building_no": {
                                                "description": "Building number",
                                                "type": "string",
                                                "example": "123"
                                            },
                                            "apartment_no": {
                                                "description": "Apartment number",
                                                "type": "string",
                                                "example": "4"
                                            },
                                            "postal_code": {
                                                "description": "Postal code",
                                                "type": "string",
                                                "example": "34728"
                                            },
                                            "address_type": {
                                                "description": "Address type",
                                                "type": "string",
                                                "enum": [
                                                    "home",
                                                    "work",
                                                    "other"
                                                ],
                                                "example": "home"
                                            },
                                            "is_default": {
                                                "description": "Whether this is the default address",
                                                "type": "boolean",
                                                "default": false,
                                                "example": true
                                            },
                                            "status": {
                                                "description": "Address status",
                                                "type": "string",
                                                "default": "active",
                                                "enum": [
                                                    "active",
                                                    "inactive"
                                                ],
                                                "example": "active"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Person status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Person status updated successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "name": {
                                                    "description": "Person's first name",
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "surname": {
                                                    "description": "Person's last name",
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "tc_no": {
                                                    "description": "Turkish Citizenship Number",
                                                    "type": "string",
                                                    "example": "12345678901"
                                                },
                                                "phone": {
                                                    "description": "Phone number",
                                                    "type": "string",
                                                    "example": "+905555555555"
                                                },
                                                "email": {
                                                    "description": "Email address",
                                                    "type": "string",
                                                    "example": "john@example.com"
                                                },
                                                "birth_date": {
                                                    "description": "Birth date",
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "1990-01-01"
                                                },
                                                "gender": {
                                                    "description": "Person's gender",
                                                    "type": "string",
                                                    "enum": [
                                                        "MALE",
                                                        "FEMALE"
                                                    ],
                                                    "example": "MALE"
                                                },
                                                "city": {
                                                    "description": "City",
                                                    "type": "string",
                                                    "example": "Istanbul"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "enum": [
                                                        "ACTIVE",
                                                        "INACTIVE",
                                                        "SUSPENDED"
                                                    ],
                                                    "example": "ACTIVE"
                                                },
                                                "address": {
                                                    "$ref": "#/components/schemas/AddressResource"
                                                },
                                                "profile_photo_url": {
                                                    "type": "string",
                                                    "example": "http://example.com/storage/profile-photos/abc123.jpg",
                                                    "nullable": true
                                                },
                                                "created_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "updated_at": {
                                                    "type": "string",
                                                    "format": "date-time"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/people/{id}/profile-photo": {
            "post": {
                "tags": [
                    "People"
                ],
                "summary": "Upload profile photo",
                "description": "Upload a profile photo for a person",
                "operationId": "338fb97f212cc5542d9a6e12d3104cf0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to upload photo for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "profile_photo": {
                                        "description": "The profile photo file to upload",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile photo uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Profile photo uploaded successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "profile_photo_path": {
                                                    "type": "string",
                                                    "example": "profile-photos/abc123.jpg"
                                                },
                                                "profile_photo_url": {
                                                    "type": "string",
                                                    "example": "http://example.com/storage/profile-photos/abc123.jpg"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/account-transactions": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get all account transactions with optional filtering",
                "description": "Returns a paginated list of account transactions with optional filtering",
                "operationId": "getAccountTransactions",
                "parameters": [
                    {
                        "name": "guest_id",
                        "in": "query",
                        "description": "Filter by guest ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "transaction_type",
                        "in": "query",
                        "description": "Filter by transaction type (1-8)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8
                            ]
                        }
                    },
                    {
                        "name": "model_type",
                        "in": "query",
                        "description": "Filter by model type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Filter by model ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "movement_type",
                        "in": "query",
                        "description": "Filter by movement type (1: debit, -1: credit)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                -1
                            ]
                        }
                    },
                    {
                        "name": "min_amount",
                        "in": "query",
                        "description": "Filter by minimum amount",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "max_amount",
                        "in": "query",
                        "description": "Filter by maximum amount",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountTransactionResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/account-transactions/{id}": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get a specific account transaction",
                "description": "Returns information about a specific account transaction",
                "operationId": "getAccountTransaction",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Account transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountTransactionResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{guestId}/account-transactions": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get account transactions for a specific guest",
                "description": "Returns a paginated list of account transactions for a specific guest",
                "operationId": "getGuestAccountTransactions",
                "parameters": [
                    {
                        "name": "guestId",
                        "in": "path",
                        "description": "Guest ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountTransactionResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/account-transactions/by-type/{transactionType}": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get account transactions by type",
                "description": "Returns a paginated list of account transactions of a specific type",
                "operationId": "getAccountTransactionsByType",
                "parameters": [
                    {
                        "name": "transactionType",
                        "in": "path",
                        "description": "Transaction type (1-8)",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountTransactionResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid transaction type"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/account-transactions/summary": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get account transaction summary",
                "description": "Returns a summary of account transactions, grouped by guest",
                "operationId": "getAccountTransactionSummary",
                "parameters": [
                    {
                        "name": "guest_id",
                        "in": "query",
                        "description": "Guest ID (required)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountTransactionSummaryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{guestId}/account-transactions/history": {
            "get": {
                "tags": [
                    "Account Transactions"
                ],
                "summary": "Get account transaction history with running balance",
                "description": "Returns account transaction history with running balance for a specific guest",
                "operationId": "getAccountTransactionHistory",
                "parameters": [
                    {
                        "name": "guestId",
                        "in": "path",
                        "description": "Guest ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of transactions to return",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AccountTransactionResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/company/balance": {
            "get": {
                "tags": [
                    "Company Integration"
                ],
                "summary": "Get company balance information",
                "operationId": "7a4b63215a74df2c9dcfb8eeae2a35d0",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company balance information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Operation successful"
                                        },
                                        "data": {
                                            "properties": {
                                                "Balance": {
                                                    "type": "number",
                                                    "example": 1000.5
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or error retrieving balance"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/company/vendors": {
            "get": {
                "tags": [
                    "Company Integration"
                ],
                "summary": "Get company vendor information",
                "operationId": "97f53b348ed1a131aa2ad44feed0af81",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company vendor information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Operation successful"
                                        },
                                        "data": {
                                            "properties": {
                                                "vendors": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or error retrieving vendor information"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies": {
            "get": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Get all currencies",
                "description": "Returns paginated list of all currencies",
                "operationId": "getCurrencies",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of currencies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Currency"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Create a new currency",
                "description": "Creates a new currency and returns it",
                "operationId": "storeCurrency",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "name",
                                    "symbol"
                                ],
                                "properties": {
                                    "code": {
                                        "description": "Currency code (e.g. USD, EUR, TRY)",
                                        "type": "string",
                                        "example": "USD"
                                    },
                                    "name": {
                                        "description": "Currency name",
                                        "type": "string",
                                        "example": "US Dollar"
                                    },
                                    "symbol": {
                                        "description": "Currency symbol",
                                        "type": "string",
                                        "example": "$"
                                    },
                                    "decimal_places": {
                                        "description": "Number of decimal places",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "is_default": {
                                        "description": "Whether this is the default currency",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "status": {
                                        "description": "Currency status",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created currency",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies/active": {
            "get": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Get all active currencies",
                "description": "Returns list of all active currencies",
                "operationId": "getActiveCurrencies",
                "responses": {
                    "200": {
                        "description": "List of active currencies",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Currency"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies/default": {
            "get": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Get default currency",
                "description": "Returns the default currency for the tenant",
                "operationId": "getDefaultCurrency",
                "responses": {
                    "200": {
                        "description": "Default currency",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Default currency not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies/{id}": {
            "get": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Get a currency by ID",
                "description": "Returns a specific currency by ID",
                "operationId": "getCurrency",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currency details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Currency not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Update a currency",
                "description": "Updates a currency and returns it",
                "operationId": "updateCurrency",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "Currency code (e.g. USD, EUR, TRY)",
                                        "type": "string",
                                        "example": "USD"
                                    },
                                    "name": {
                                        "description": "Currency name",
                                        "type": "string",
                                        "example": "US Dollar"
                                    },
                                    "symbol": {
                                        "description": "Currency symbol",
                                        "type": "string",
                                        "example": "$"
                                    },
                                    "decimal_places": {
                                        "description": "Number of decimal places",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "is_default": {
                                        "description": "Whether this is the default currency",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "status": {
                                        "description": "Currency status",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated currency",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Currency not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Delete a currency",
                "description": "Soft deletes a currency",
                "operationId": "deleteCurrency",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currency deleted"
                    },
                    "404": {
                        "description": "Currency not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies/{id}/status": {
            "patch": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Update currency status",
                "description": "Updates a currency's status (active/inactive)",
                "operationId": "updateCurrencyStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "Currency status",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Currency status updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Currency not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/currencies/{id}/set-default": {
            "patch": {
                "tags": [
                    "Currencies"
                ],
                "summary": "Set currency as default",
                "description": "Sets a currency as the default for the tenant",
                "operationId": "setCurrencyAsDefault",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currency set as default",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Currency"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Currency not found"
                    },
                    "400": {
                        "description": "Cannot set inactive currency as default"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{registrationId}/deposit-deductions": {
            "get": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Get all deposit deductions for a season registration",
                "description": "Retrieve a list of deposit deductions for a specific season registration",
                "operationId": "7091545a4bb13302def146971b282189",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "Season Registration ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deposit deductions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DepositDeduction"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Create a new deposit deduction",
                "description": "Add a new deduction to a guest's security deposit",
                "operationId": "1d78766402391e36d44581baa69c136b",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "Season Registration ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount",
                                    "reason"
                                ],
                                "properties": {
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 50
                                    },
                                    "reason": {
                                        "type": "string",
                                        "example": "Damaged furniture"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Broken chair in living room",
                                        "nullable": true
                                    },
                                    "evidence_photo_path": {
                                        "type": "string",
                                        "example": "/storage/deductions/photo123.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Deposit deduction created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Deposit deduction created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DepositDeduction"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/deposit-deductions/{id}": {
            "get": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Get a specific deposit deduction",
                "description": "Retrieve details of a specific deposit deduction",
                "operationId": "3369a4b27aab29dfa3f9c4791189cd85",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deposit Deduction ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit deduction retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DepositDeduction"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deposit deduction not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Update a deposit deduction",
                "description": "Update details of an existing deposit deduction",
                "operationId": "b6954980bb2f18d8e38e110f1311be3b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deposit Deduction ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 75
                                    },
                                    "reason": {
                                        "type": "string",
                                        "example": "Updated: Damaged furniture"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated: Broken chair and table in living room",
                                        "nullable": true
                                    },
                                    "evidence_photo_path": {
                                        "type": "string",
                                        "example": "/storage/deductions/updated-photo123.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Deposit deduction updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Deposit deduction updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DepositDeduction"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deposit deduction not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Delete a deposit deduction",
                "description": "Remove a deposit deduction",
                "operationId": "581c17c5c9192684c3ba5540790f44c7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Deposit Deduction ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit deduction deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Deposit deduction deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Deposit deduction not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{registrationId}/deposit-summary": {
            "get": {
                "tags": [
                    "Deposit Deductions"
                ],
                "summary": "Get deposit summary for a season registration",
                "description": "Retrieve a summary of deposit and deductions for a specific registration",
                "operationId": "b77717ec5e4b9d8c9a27cd047e5d2775",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "Season Registration ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deposit summary retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "deposit_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 300
                                                },
                                                "total_deductions": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 50
                                                },
                                                "refundable_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 250
                                                },
                                                "deduction_count": {
                                                    "type": "integer",
                                                    "example": 2
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-categories": {
            "get": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Get a list of discount categories",
                "description": "Returns a paginated list of discount categories",
                "operationId": "getDiscountCategories",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Filter by code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DiscountCategory"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Create a new discount category",
                "description": "Creates a new discount category",
                "operationId": "createDiscountCategory",
                "requestBody": {
                    "description": "Discount category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "code",
                                    "name"
                                ],
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "RENEWAL"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Renewal Discount"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Discount for returning guests"
                                    },
                                    "status": {
                                        "type": "string",
                                        "default": "active",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountCategory"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-categories/{id}": {
            "get": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Get a specific discount category",
                "description": "Returns a specific discount category by ID",
                "operationId": "getDiscountCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountCategory"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Update a discount category",
                "description": "Updates an existing discount category",
                "operationId": "updateDiscountCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Discount category data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "type": "string",
                                        "example": "RENEWAL"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Renewal Discount"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Discount for returning guests"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountCategory"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Delete a discount category",
                "description": "Soft deletes a discount category",
                "operationId": "deleteDiscountCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-categories/{id}/status": {
            "patch": {
                "tags": [
                    "Discount Categories"
                ],
                "summary": "Update discount category status",
                "description": "Updates the status of an existing discount category",
                "operationId": "updateDiscountCategoryStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Status data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountCategory"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-rules": {
            "get": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Get a list of discount rules",
                "description": "Returns a paginated list of discount rules",
                "operationId": "getDiscountRules",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by discount category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Filter by product ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "product_category_id",
                        "in": "query",
                        "description": "Filter by product category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Filter by date (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "discount_type",
                        "in": "query",
                        "description": "Filter by discount type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "percentage",
                                "fixed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DiscountRule"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Create a new discount rule",
                "description": "Creates a new discount rule",
                "operationId": "createDiscountRule",
                "requestBody": {
                    "description": "Discount rule data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "discount_category_id",
                                    "start_date",
                                    "end_date",
                                    "discount_type",
                                    "discount_value"
                                ],
                                "properties": {
                                    "discount_category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "product_category_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-01-01"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-12-31"
                                    },
                                    "discount_type": {
                                        "type": "string",
                                        "enum": [
                                            "percentage",
                                            "fixed"
                                        ],
                                        "example": "percentage"
                                    },
                                    "discount_value": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 10
                                    },
                                    "min_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100,
                                        "nullable": true
                                    },
                                    "max_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 1000,
                                        "nullable": true
                                    },
                                    "min_nights": {
                                        "type": "integer",
                                        "example": 3,
                                        "nullable": true
                                    },
                                    "max_nights": {
                                        "type": "integer",
                                        "example": 14,
                                        "nullable": true
                                    },
                                    "priority": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "status": {
                                        "type": "string",
                                        "default": "active",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountRule"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-rules/{id}": {
            "get": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Get a specific discount rule",
                "description": "Returns a specific discount rule by ID",
                "operationId": "getDiscountRule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount rule ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountRule"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Update a discount rule",
                "description": "Updates an existing discount rule",
                "operationId": "updateDiscountRule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount rule ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Discount rule data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "discount_category_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "product_category_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-01-01"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-12-31"
                                    },
                                    "discount_type": {
                                        "type": "string",
                                        "enum": [
                                            "percentage",
                                            "fixed"
                                        ],
                                        "example": "percentage"
                                    },
                                    "discount_value": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 10
                                    },
                                    "min_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100,
                                        "nullable": true
                                    },
                                    "max_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 1000,
                                        "nullable": true
                                    },
                                    "min_nights": {
                                        "type": "integer",
                                        "example": 3,
                                        "nullable": true
                                    },
                                    "max_nights": {
                                        "type": "integer",
                                        "example": 14,
                                        "nullable": true
                                    },
                                    "priority": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountRule"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Delete a discount rule",
                "description": "Soft deletes a discount rule",
                "operationId": "deleteDiscountRule",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount rule ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-rules/{id}/status": {
            "patch": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Update discount rule status",
                "description": "Updates the status of an existing discount rule",
                "operationId": "updateDiscountRuleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount rule ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Status data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/DiscountRule"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/discount-categories/{categoryId}/rules": {
            "get": {
                "tags": [
                    "Discount Rules"
                ],
                "summary": "Get discount rules by category",
                "description": "Returns all discount rules for a specific category",
                "operationId": "getDiscountRulesByCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "Discount category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DiscountRule"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates": {
            "get": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Get all exchange rates",
                "description": "Returns paginated list of all exchange rates",
                "operationId": "getExchangeRates",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of exchange rates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExchangeRate"
                                            }
                                        },
                                        "links": {
                                            "type": "object"
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Create a new exchange rate",
                "description": "Creates a new exchange rate entry",
                "operationId": "storeExchangeRate",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "base_currency_id",
                                    "target_currency_id",
                                    "rate",
                                    "effective_date"
                                ],
                                "properties": {
                                    "base_currency_id": {
                                        "description": "Base currency ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "target_currency_id": {
                                        "description": "Target currency ID",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "rate": {
                                        "description": "Exchange rate value",
                                        "type": "number",
                                        "format": "float",
                                        "example": 1.2345
                                    },
                                    "effective_date": {
                                        "description": "Date when rate is effective",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-03-24"
                                    },
                                    "source": {
                                        "description": "Source of exchange rate",
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api",
                                            "system"
                                        ],
                                        "example": "manual"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Exchange rate created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ExchangeRate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates/latest": {
            "get": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Get latest exchange rates",
                "description": "Returns the latest exchange rates for all currency pairs",
                "operationId": "getLatestExchangeRates",
                "responses": {
                    "200": {
                        "description": "Latest exchange rates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExchangeRate"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates/{id}": {
            "get": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Get an exchange rate by ID",
                "description": "Returns details of a specific exchange rate",
                "operationId": "showExchangeRate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Exchange rate ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange rate details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ExchangeRate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Exchange rate not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Update an exchange rate",
                "description": "Updates an existing exchange rate",
                "operationId": "updateExchangeRate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Exchange rate ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "rate"
                                ],
                                "properties": {
                                    "rate": {
                                        "description": "Exchange rate value",
                                        "type": "number",
                                        "format": "float",
                                        "example": 1.2345
                                    },
                                    "effective_date": {
                                        "description": "Date when rate is effective",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-03-24"
                                    },
                                    "source": {
                                        "description": "Source of exchange rate",
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "api",
                                            "system"
                                        ],
                                        "example": "manual"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Exchange rate updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ExchangeRate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Exchange rate not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Delete an exchange rate",
                "description": "Deletes an existing exchange rate",
                "operationId": "deleteExchangeRate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Exchange rate ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange rate deleted"
                    },
                    "404": {
                        "description": "Exchange rate not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates/rate": {
            "get": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Get exchange rate for currency pair",
                "description": "Returns the exchange rate for a specific currency pair and date",
                "operationId": "getExchangeRate",
                "parameters": [
                    {
                        "name": "base_currency_id",
                        "in": "query",
                        "description": "Base currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "target_currency_id",
                        "in": "query",
                        "description": "Target currency ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Date for exchange rate (YYYY-MM-DD)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange rate details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/ExchangeRate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing required parameters"
                    },
                    "404": {
                        "description": "Exchange rate not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates/convert": {
            "post": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Convert amount between currencies",
                "description": "Converts an amount from one currency to another",
                "operationId": "convertAmount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount",
                                    "from_currency_id",
                                    "to_currency_id"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "Amount to convert",
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "from_currency_id": {
                                        "description": "Source currency ID",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "to_currency_id": {
                                        "description": "Target currency ID",
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "date": {
                                        "description": "Date for exchange rate",
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-03-24"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Converted amount",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "original_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 100
                                                },
                                                "from_currency_id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "to_currency_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "converted_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 123.45
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-03-24"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - missing required parameters"
                    },
                    "404": {
                        "description": "Currency conversion failed - no exchange rate available"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/exchange-rates/update-from-api": {
            "post": {
                "tags": [
                    "Exchange Rates"
                ],
                "summary": "Update exchange rates from API",
                "description": "Fetches and updates exchange rates from external API or TCMB",
                "operationId": "updateExchangeRatesFromApi",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "api_key": {
                                        "description": "Optional API key to use (if not using TCMB)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Exchange rates updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "success": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "updated": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "failed": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-03-24"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get a list of invoices",
                "operationId": "a21ef3dc77bde6cd947e70b4768696a7",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "draft",
                                "issued",
                                "canceled"
                            ]
                        }
                    },
                    {
                        "name": "integration_status",
                        "in": "query",
                        "description": "Filter by integration status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "sent",
                                "error"
                            ]
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (Y-m-d)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (Y-m-d)",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoices",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Invoice"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Create a new invoice",
                "operationId": "56303918fc4230d1a49622aec17a8010",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModuleFinanceCreateInvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invoice created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/invoices/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get a specific invoice with details",
                "operationId": "0bc9425479701d6dbf5e9f3a7a2d6aa8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Update an invoice",
                "operationId": "c74ffcb91f5a056ec661b22dc91554a4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModuleFinanceUpdateInvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Delete an invoice",
                "operationId": "d3c75e368a467ccf8b88a4b08017d46f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice deleted successfully"
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Cannot delete non-draft invoice"
                    }
                }
            }
        },
        "/api/v1/invoices/{id}/cancel": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Cancel an invoice",
                "operationId": "fe242dd6d77045d73a5a80b936e088eb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice canceled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Cannot cancel invoice"
                    }
                }
            }
        },
        "/api/v1/invoices/generate-monthly": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Generate monthly invoices for unbilled payments",
                "operationId": "85f92eff197f7203c0bc61f1b40a5403",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "month": {
                                        "description": "Month in YYYY-MM format",
                                        "type": "string",
                                        "example": "2025-03"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoices generated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Invoice"
                                            }
                                        },
                                        "count": {
                                            "type": "integer",
                                            "example": 5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/v1/season-registrations/{registrationId}/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get invoices for a specific season registration",
                "operationId": "932b4e1e6ef4be459aec03f74362972a",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "Season Registration ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoices for the registration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Invoice"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{id}/send-to-einvoice": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send invoice to e-invoice system",
                "operationId": "9785b3a026a49ad0b3778b5a229a3f55",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_archive": {
                                        "description": "Whether to send as archive invoice",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "provider": {
                                        "description": "Optional provider override",
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Invalid request or invoice cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{id}/cancel-in-einvoice": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Cancel invoice in e-invoice system",
                "operationId": "ff19a14e23d130fe7eda967613bd3225",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reason": {
                                        "type": "string",
                                        "example": "Customer requested cancellation"
                                    },
                                    "is_archive": {
                                        "description": "Whether it's an archive invoice",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "provider": {
                                        "description": "Optional provider override",
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice cancelled successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Invalid request or invoice cannot be cancelled"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{id}/send-email": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send invoice email via e-invoice system",
                "operationId": "55bcaa8d23824b8d479133f1faaf4eb5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "customer@example.com"
                                    },
                                    "provider": {
                                        "description": "Optional provider override",
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Email sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    },
                    "422": {
                        "description": "Invalid request or email cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/search-in-einvoice": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Search for invoices in e-invoice system",
                "operationId": "7c26a7217c13a6a9da3be9ce7119c3ea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "search_params": {
                                        "type": "object",
                                        "example": {
                                            "start_date": "2025-01-01",
                                            "end_date": "2025-12-31"
                                        }
                                    },
                                    "is_archive": {
                                        "description": "Whether to search in archive",
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "provider": {
                                        "description": "Optional provider override",
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Search completed"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/taxpayer/{taxCode}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Check if a tax code belongs to an e-invoice taxpayer",
                "operationId": "3f51d650e60fae0b8acdbcbcb4fc0c06",
                "parameters": [
                    {
                        "name": "taxCode",
                        "in": "path",
                        "description": "Tax code to check",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Taxpayer information",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax payer information retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "is_einvoice_user": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "is_earchive_user": {
                                                    "type": "boolean",
                                                    "example": false
                                                },
                                                "tax_code": {
                                                    "type": "string",
                                                    "example": "1234567890"
                                                },
                                                "tax_name": {
                                                    "type": "string",
                                                    "example": "Test Company"
                                                },
                                                "registration_date": {
                                                    "type": "string",
                                                    "example": "2021-01-01"
                                                },
                                                "inbox_tags": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or taxpayer not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/address-data": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get address data (cities and tax offices) for e-invoice",
                "operationId": "efafba94fca946926a23eddbda0ae8a4",
                "parameters": [
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Address data retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "cities": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "tax_offices": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or error retrieving address data"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/cities/{cityCode}/towns": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get towns for a specific city",
                "operationId": "477cf816ae63f3aa3fa14b8d79767ccc",
                "parameters": [
                    {
                        "name": "cityCode",
                        "in": "path",
                        "description": "City code",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Town list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Town list retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or error retrieving town list"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/archive/send-xml": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send archive invoice XML to e-archive system",
                "operationId": "ca71cdc7f2c9755ec9a97120ad488772",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "xml": {
                                        "type": "string",
                                        "example": "<xml>...</xml>"
                                    },
                                    "params": {
                                        "type": "object",
                                        "example": {
                                            "CompanyVendorNumber": "1234"
                                        }
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Archive invoice sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archive invoice sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or XML cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/archive/send-xml-without-number": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send archive invoice XML without invoice number to e-archive system",
                "operationId": "b2193ef5280ba1ef4ea46cb601beb2e0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "xml": {
                                        "type": "string",
                                        "example": "<xml>...</xml>"
                                    },
                                    "params": {
                                        "type": "object",
                                        "example": {
                                            "CompanyVendorNumber": "1234"
                                        }
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Archive invoice sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archive invoice sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or XML cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/archive/send-report": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send archive invoice report to GIB",
                "operationId": "4f42e87d3f603f48442e3c66809c7262",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "last_date": {
                                        "type": "string",
                                        "example": "2025-12-31"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Archive invoice report sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archive invoice report sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or report cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/archive/search-report": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Search for archive invoice report",
                "operationId": "e6cb45a8fba5418fdc8ea775369cfa3b",
                "parameters": [
                    {
                        "name": "report_number",
                        "in": "query",
                        "description": "Report number",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_number",
                        "in": "query",
                        "description": "Group number",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Archive invoice report search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Archive invoice report found"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/document-viewer-link": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get document viewer link",
                "operationId": "1c8904f026adf5c89e187a9f9da6f672",
                "parameters": [
                    {
                        "name": "ettn",
                        "in": "query",
                        "description": "ETTN of the document",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Direction of the invoice (INCOMING or OUTGOING)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "INCOMING",
                                "OUTGOING"
                            ]
                        }
                    },
                    {
                        "name": "document_type",
                        "in": "query",
                        "description": "Document type (EINVOICE or EARCHIVE)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "EINVOICE",
                                "EARCHIVE"
                            ]
                        }
                    },
                    {
                        "name": "provider",
                        "in": "query",
                        "description": "Optional provider override",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document viewer link",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document viewer link retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "link": {
                                                    "type": "string",
                                                    "example": "https://example.com/view/123456"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/send-xml": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send invoice XML to e-invoice system",
                "operationId": "9c4a817043688d9088ae6b4070898734",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "xml": {
                                        "type": "string",
                                        "example": "<xml>...</xml>"
                                    },
                                    "params": {
                                        "type": "object",
                                        "example": {
                                            "CompanyVendorNumber": "1234"
                                        }
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or XML cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/send-xml-without-number": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send invoice XML without invoice number to e-invoice system",
                "operationId": "b423987bef5b29c1cc9a10533b8e8dd0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "xml": {
                                        "type": "string",
                                        "example": "<xml>...</xml>"
                                    },
                                    "params": {
                                        "type": "object",
                                        "example": {
                                            "CompanyVendorNumber": "1234"
                                        }
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or XML cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/send-reply": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Send reply to an invoice (accept or reject)",
                "operationId": "3078a28640161132ec2e2ad831718d31",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ettn": {
                                        "type": "string",
                                        "example": "12345-ABCDE-67890"
                                    },
                                    "response_type": {
                                        "type": "string",
                                        "enum": [
                                            "ACCEPT",
                                            "REJECT"
                                        ],
                                        "example": "ACCEPT"
                                    },
                                    "note": {
                                        "type": "string",
                                        "example": "Invoice accepted",
                                        "nullable": true
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Reply sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Reply sent successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or reply cannot be sent"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/update-state": {
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Update invoice state in e-invoice system",
                "operationId": "f98707e4f1f88825e254d72fcde95664",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ettn": {
                                        "type": "string",
                                        "example": "12345-ABCDE-67890"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "READ"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice state updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice state updated successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or state cannot be updated"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/direct": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Direct invoice to another branch/vendor",
                "operationId": "08e77785f49d26390ccad73312454593",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ettn_list": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "12345-ABCDE-67890"
                                    },
                                    "vendor_number": {
                                        "type": "string",
                                        "example": "12345"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice directed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice directed successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or invoice cannot be directed"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/archive": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Archive an e-invoice",
                "operationId": "ecd564ef32765fbceb42aba54b4801aa",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ettn": {
                                        "type": "string",
                                        "example": "12345-ABCDE-67890"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice archived successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice archived successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or invoice cannot be archived"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/de-archive": {
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "De-archive an e-invoice",
                "operationId": "3b9f3fbb691edde00cdfcd5f87dec079",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ettn": {
                                        "type": "string",
                                        "example": "12345-ABCDE-67890"
                                    },
                                    "provider": {
                                        "type": "string",
                                        "example": "isnet",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice de-archived successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice de-archived successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid request or invoice cannot be de-archived"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{invoiceId}/details": {
            "get": {
                "tags": [
                    "Invoice Details"
                ],
                "summary": "Get details for a specific invoice",
                "operationId": "983035871e691ccfa00c274f8eb39f3c",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoice details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InvoiceDetail"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invoice Details"
                ],
                "summary": "Add a detail to an invoice",
                "operationId": "46505de215a581577ba0223a291e3d4a",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInvoiceDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Detail added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice or product not found"
                    },
                    "422": {
                        "description": "Validation error or invoice not in draft status"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{invoiceId}/details/{id}": {
            "put": {
                "tags": [
                    "Invoice Details"
                ],
                "summary": "Update an invoice detail",
                "operationId": "ef1256e30012282031ac3b9d4fc9b962",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInvoiceDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Detail updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice detail not found"
                    },
                    "422": {
                        "description": "Validation error or invoice not in draft status"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invoice Details"
                ],
                "summary": "Remove an invoice detail",
                "operationId": "41b8bc2add88f87eedc2e5b1c4a81846",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail removed successfully"
                    },
                    "404": {
                        "description": "Invoice detail not found"
                    },
                    "422": {
                        "description": "Invoice not in draft status"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{registrationId}/invoice-titles": {
            "get": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Get all invoice titles for a season registration",
                "description": "Retrieve a list of all invoice titles for a specific season registration",
                "operationId": "c53ac06a3b80abdfa2c4115cca158762",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "ID of the season registration to get invoice titles for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoice titles retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InvoiceTitleResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoice-titles/{id}": {
            "get": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Get invoice title by ID",
                "description": "Retrieve a specific invoice title by its ID",
                "operationId": "bb488096589ebf44bf57483cd61ba37b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of invoice title to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice title retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/InvoiceTitleResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice title not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Update invoice title",
                "description": "Update an existing invoice title",
                "operationId": "eff3013350ced118e80e61d528e90c39",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of invoice title to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title_type": {
                                        "type": "string",
                                        "enum": [
                                            "corporate",
                                            "individual"
                                        ],
                                        "example": "corporate"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "Acme Corp"
                                    },
                                    "tax_office": {
                                        "type": "string",
                                        "example": "Boston"
                                    },
                                    "tax_number": {
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "identity_number": {
                                        "type": "string",
                                        "example": "12345678901"
                                    },
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St, Boston, MA"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1 555 123 4567"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "john@example.com"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "address_data": {
                                        "properties": {
                                            "country_id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "province_id": {
                                                "type": "integer",
                                                "example": 34
                                            },
                                            "district_id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "neighborhood": {
                                                "type": "string",
                                                "example": "Atatürk"
                                            },
                                            "street": {
                                                "type": "string",
                                                "example": "Barbaros Avenue"
                                            },
                                            "building_no": {
                                                "type": "string",
                                                "example": "14"
                                            },
                                            "apartment_no": {
                                                "type": "string",
                                                "example": "7"
                                            },
                                            "postal_code": {
                                                "type": "string",
                                                "example": "34758"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice title updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice title updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice title not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Delete invoice title",
                "description": "Delete an invoice title by ID",
                "operationId": "aa69452a647bb8a10a12cd2a504396a5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of invoice title to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice title deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice title deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice title not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Cannot delete the only invoice title"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoice-titles": {
            "post": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Create new invoice title",
                "description": "Create a new invoice title",
                "operationId": "bcc4492cb75080ad4bc2e982d087174e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "season_registration_id",
                                    "title_type",
                                    "phone"
                                ],
                                "properties": {
                                    "season_registration_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title_type": {
                                        "type": "string",
                                        "enum": [
                                            "corporate",
                                            "individual"
                                        ],
                                        "example": "corporate"
                                    },
                                    "company_name": {
                                        "type": "string",
                                        "example": "Acme Corp"
                                    },
                                    "tax_office": {
                                        "type": "string",
                                        "example": "Boston"
                                    },
                                    "tax_number": {
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "identity_number": {
                                        "type": "string",
                                        "example": "12345678901"
                                    },
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St, Boston, MA"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+1 555 123 4567"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "john@example.com"
                                    },
                                    "is_default": {
                                        "type": "boolean",
                                        "example": true
                                    },
                                    "address_data": {
                                        "properties": {
                                            "country_id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "province_id": {
                                                "type": "integer",
                                                "example": 34
                                            },
                                            "district_id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "neighborhood": {
                                                "type": "string",
                                                "example": "Atatürk"
                                            },
                                            "street": {
                                                "type": "string",
                                                "example": "Barbaros Avenue"
                                            },
                                            "building_no": {
                                                "type": "string",
                                                "example": "14"
                                            },
                                            "apartment_no": {
                                                "type": "string",
                                                "example": "7"
                                            },
                                            "postal_code": {
                                                "type": "string",
                                                "example": "34758"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invoice title created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice title created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/InvoiceTitleResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/invoice-titles/{id}/set-default": {
            "patch": {
                "tags": [
                    "Invoice Titles"
                ],
                "summary": "Set invoice title as default",
                "description": "Set an invoice title as the default for its registration",
                "operationId": "7c9c5101d40bda17e2ad54d51ca5a440",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of invoice title to set as default",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice title set as default successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invoice title set as default successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice title not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get list of payments with filtering options",
                "description": "Returns a paginated list of payments with optional filters",
                "operationId": "getPayments",
                "parameters": [
                    {
                        "name": "payment_plan_id",
                        "in": "query",
                        "description": "Filter by payment plan ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "payment_type_id",
                        "in": "query",
                        "description": "Filter by payment type ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by payment status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "completed",
                                "cancelled",
                                "refunded"
                            ]
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter by payment date (from)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter by payment date (to)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "amount_min",
                        "in": "query",
                        "description": "Filter by minimum amount",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amount_max",
                        "in": "query",
                        "description": "Filter by maximum amount",
                        "required": false,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "approval_code",
                        "in": "query",
                        "description": "Filter by approval code (partial match)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCollection"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Create a new payment",
                "description": "Creates a new payment record",
                "operationId": "createPayment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResourceSchema"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/v1/payments/{id}": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get a specific payment",
                "description": "Returns a specific payment by ID",
                "operationId": "getPayment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResourceSchema"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Payments"
                ],
                "summary": "Update a payment",
                "description": "Updates an existing payment record",
                "operationId": "updatePayment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FinanceUpdatePaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResourceSchema"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payments"
                ],
                "summary": "Delete a payment",
                "description": "Soft deletes a payment record",
                "operationId": "deletePayment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment deleted successfully"
                    },
                    "404": {
                        "description": "Payment not found"
                    }
                }
            }
        },
        "/api/v1/payments/{id}/cancel": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Cancel a payment",
                "description": "Cancels an existing payment and updates related payment plan status",
                "operationId": "cancelPayment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResourceSchema"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "400": {
                        "description": "Payment cannot be cancelled"
                    }
                }
            }
        },
        "/api/v1/payments/{id}/refund": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Refund a payment",
                "description": "Processes a refund for an existing payment and updates related payment plan status",
                "operationId": "refundPayment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment refunded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentResourceSchema"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment not found"
                    },
                    "400": {
                        "description": "Payment cannot be refunded"
                    }
                }
            }
        },
        "/api/v1/payment-plans/{planId}/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get payments by payment plan",
                "description": "Returns all payments for a specific payment plan",
                "operationId": "getPaymentsByPlan",
                "parameters": [
                    {
                        "name": "planId",
                        "in": "path",
                        "description": "Payment plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentResourceSchema"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment plan not found"
                    }
                }
            }
        },
        "/api/v1/payment-types/{typeId}/payments": {
            "get": {
                "tags": [
                    "Payments"
                ],
                "summary": "Get payments by payment type",
                "description": "Returns paginated payments for a specific payment type",
                "operationId": "getPaymentsByType",
                "parameters": [
                    {
                        "name": "typeId",
                        "in": "path",
                        "description": "Payment type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type not found"
                    }
                }
            }
        },
        "/api/v1/payment-plans": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Get a list of payment plans",
                "description": "Display a listing of the payment plans.",
                "operationId": "listPaymentPlans",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "season_registration_id",
                        "in": "query",
                        "description": "Filter by season registration ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "planned",
                                "paid",
                                "partial_paid",
                                "overdue"
                            ]
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by planned date (start date)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by planned date (end date)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "is_deposit",
                        "in": "query",
                        "description": "Filter by deposit flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Create a new payment plan",
                "description": "Store a newly created payment plan in storage.",
                "operationId": "createPaymentPlan",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlanCreateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment plan created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlanResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-plans/{id}": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Get a specific payment plan",
                "description": "Display the specified payment plan.",
                "operationId": "getPaymentPlan",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment plan details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlanResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Update an existing payment plan",
                "description": "Update the specified payment plan in storage.",
                "operationId": "updatePaymentPlan",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlanUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment plan updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlanResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Delete a payment plan",
                "description": "Remove the specified payment plan from storage.",
                "operationId": "deletePaymentPlan",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment plan deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-plans/{id}/status": {
            "patch": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Update payment plan status",
                "description": "Update payment plan status.",
                "operationId": "updatePaymentPlanStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlanUpdateStatusRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment plan status updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlanResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-products/{productId}/payment-plans": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Get payment plans for a specific season registration product",
                "description": "Get payment plans by season registration product.",
                "operationId": "getPaymentPlansByProduct",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Season Registration Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "planned",
                                "paid",
                                "partial_paid",
                                "overdue"
                            ]
                        }
                    },
                    {
                        "name": "is_deposit",
                        "in": "query",
                        "description": "Filter by deposit flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment plans for the specified product",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-plans/overdue": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Get a list of overdue payment plans",
                "description": "Get overdue payment plans.",
                "operationId": "getOverduePaymentPlans",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of overdue payment plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-plans/deposits": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Get a list of deposit payment plans",
                "description": "Get deposit payment plans.",
                "operationId": "getDepositPaymentPlans",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "planned",
                                "paid",
                                "partial_paid",
                                "overdue"
                            ]
                        }
                    },
                    {
                        "name": "deposit_refund_status",
                        "in": "query",
                        "description": "Filter by deposit refund status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "not_refunded",
                                "partially_refunded",
                                "fully_refunded"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deposit payment plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-plans/process-deposit-refund/{id}": {
            "post": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "Process a deposit refund",
                "description": "Process a deposit refund.",
                "operationId": "processDepositRefund",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "refund_amount"
                                ],
                                "properties": {
                                    "refund_amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Refund of security deposit after checkout",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Deposit refund processed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Deposit refund processed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or refund amount"
                    },
                    "404": {
                        "description": "Payment plan not found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-type-categories": {
            "get": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Get all payment type categories",
                "description": "Retrieve a list of all payment type categories with optional filters",
                "operationId": "8618daf0da270f50ef844e7580e58c1e",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter categories by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment type categories retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePaymentTypeCategoryResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Create new payment type category",
                "description": "Create a new payment type category",
                "operationId": "deb33146fdd573c8aaf7d7cbb8115f0e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "status"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the payment type category",
                                        "type": "string",
                                        "example": "Credit Card"
                                    },
                                    "description": {
                                        "description": "Description of the payment type category",
                                        "type": "string",
                                        "example": "Credit and debit card payments"
                                    },
                                    "status": {
                                        "description": "Status of the payment type category (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment type category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type category created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePaymentTypeCategoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-type-categories/{id}": {
            "get": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Get payment type category by ID",
                "description": "Retrieve a specific payment type category by its ID",
                "operationId": "3654a6286c0b347d497f0a6035b433c1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type category to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment type category retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePaymentTypeCategoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Update payment type category",
                "description": "Update an existing payment type category",
                "operationId": "5232139f0dc1dadda6b616652bc20260",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type category to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the payment type category",
                                        "type": "string",
                                        "example": "Credit Card"
                                    },
                                    "description": {
                                        "description": "Description of the payment type category",
                                        "type": "string",
                                        "example": "Credit and debit card payments"
                                    },
                                    "status": {
                                        "description": "Status of the payment type category (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment type category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type category updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type category not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Delete payment type category",
                "description": "Delete a payment type category by ID",
                "operationId": "5ceae117621614a167462d697d321fb0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment type category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type category deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Payment type category has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-type-categories/{id}/status": {
            "patch": {
                "tags": [
                    "Payment Type Categories"
                ],
                "summary": "Update payment type category status",
                "description": "Update the status of an existing payment type category",
                "operationId": "750bf0d5b4e10a594afede4a6d8f4b7a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type category to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "Status of the payment type category (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment type category status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type category status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type category not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-types": {
            "get": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Get all payment types",
                "description": "Retrieve a list of all payment types with optional filters",
                "operationId": "6eeab783b31bd79b76e12b7768657dc0",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter by category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter payment types by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term for payment types",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePaymentTypeResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Create new payment type",
                "description": "Create a new payment type",
                "operationId": "a2cf4d7b2c66d01efa21f7e8cb0a2fbb",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "payment_type_category_id",
                                    "name",
                                    "status"
                                ],
                                "properties": {
                                    "payment_type_category_id": {
                                        "description": "ID of the payment type category",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "description": "Name of the payment type",
                                        "type": "string",
                                        "example": "Ziraat Bank Transfer"
                                    },
                                    "bank_name": {
                                        "description": "Name of the bank (required for bank transfer types)",
                                        "type": "string",
                                        "example": "Ziraat Bank"
                                    },
                                    "description": {
                                        "description": "Description of the payment type",
                                        "type": "string",
                                        "example": "Transfer from Ziraat Bank accounts"
                                    },
                                    "status": {
                                        "description": "Status of the payment type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePaymentTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-types/{id}": {
            "get": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Get payment type by ID",
                "description": "Retrieve a specific payment type by its ID",
                "operationId": "272b7348a47f619db3cc20c89560b391",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePaymentTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Update payment type",
                "description": "Update an existing payment type",
                "operationId": "94eeaffa6e88cfb225eb4c0e876c6ca4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "payment_type_category_id": {
                                        "description": "ID of the payment type category",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "description": "Name of the payment type",
                                        "type": "string",
                                        "example": "Ziraat Bank Transfer"
                                    },
                                    "bank_name": {
                                        "description": "Name of the bank (required for bank transfer types)",
                                        "type": "string",
                                        "example": "Ziraat Bank"
                                    },
                                    "description": {
                                        "description": "Description of the payment type",
                                        "type": "string",
                                        "example": "Transfer from Ziraat Bank accounts"
                                    },
                                    "status": {
                                        "description": "Status of the payment type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Delete payment type",
                "description": "Delete a payment type by ID",
                "operationId": "54fa23b46b49644230c08730d73e9099",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment type deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Payment type has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-types/{id}/status": {
            "patch": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Update payment type status",
                "description": "Update the status of an existing payment type",
                "operationId": "78bee76654b4f58cf3e92547537814c4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of payment type to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "Status of the payment type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment type status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Payment type status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/payment-type-categories/{categoryId}/payment-types": {
            "get": {
                "tags": [
                    "Payment Types"
                ],
                "summary": "Get payment types by category",
                "description": "Retrieve a list of payment types belonging to a specific category",
                "operationId": "b5dac2fef17d7ef3d4b47f5a08606768",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of the payment type category",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePaymentTypeResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/prices": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get all prices",
                "description": "Retrieve a list of all prices with optional filters",
                "operationId": "9ebef65ce38c137fa648ace2ab1810bf",
                "parameters": [
                    {
                        "name": "apart_id",
                        "in": "query",
                        "description": "Filter prices by apartment ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "season_code",
                        "in": "query",
                        "description": "Filter prices by season code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Filter prices by product ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter prices by start date range",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter prices by end date range",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of prices retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePriceResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Prices"
                ],
                "summary": "Create new price",
                "description": "Create a new price",
                "operationId": "af3bb6f0a3ac67920cccc7661f85c62b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePriceRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Price created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Price created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePriceResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/prices/{id}": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get price by ID",
                "description": "Retrieve a specific price by its ID",
                "operationId": "fc4411aab482fe2b91990971613b83f9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of price to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinancePriceResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Prices"
                ],
                "summary": "Update price",
                "description": "Update an existing price",
                "operationId": "04e55d03ff480546535948957352fcd8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of price to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePriceRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Price updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Price updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Prices"
                ],
                "summary": "Delete price",
                "description": "Delete a price by ID",
                "operationId": "29c0cb9b576ef21ec8fbde64100c3bf0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of price to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Price deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Price deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Price has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/seasons/{seasonCode}/prices": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get prices by season",
                "description": "Retrieve a list of prices for a specific season",
                "operationId": "dcd43d5f61e49578f03ab66d8eeef825",
                "parameters": [
                    {
                        "name": "seasonCode",
                        "in": "path",
                        "description": "Code of season to filter prices by",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of prices by season retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePriceResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts/{apartId}/prices": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get prices by apartment",
                "description": "Retrieve a list of prices for a specific apartment",
                "operationId": "3eb0ef29cbebbc1035b42af395436ef0",
                "parameters": [
                    {
                        "name": "apartId",
                        "in": "path",
                        "description": "ID of apartment to filter prices by",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of prices by apartment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePriceResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Apartment not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/products/{productId}/prices": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get prices by product",
                "description": "Retrieve a list of prices for a specific product",
                "operationId": "8dbe62604f7d4d0c53fabf1339697a72",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product to filter prices by",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of prices by product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePriceResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/prices/{priceId}/taxes": {
            "get": {
                "tags": [
                    "Prices"
                ],
                "summary": "Get taxes for price",
                "description": "Retrieve a list of taxes for a specific price",
                "operationId": "f4f3b8a631c4acea8d320f77f4672f3e",
                "parameters": [
                    {
                        "name": "priceId",
                        "in": "path",
                        "description": "ID of price to get taxes for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of taxes for price retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinancePriceTaxResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Prices"
                ],
                "summary": "Add tax to price",
                "description": "Add a tax to an existing price",
                "operationId": "56d8240f27ecea9424a90b2fbd8d0327",
                "parameters": [
                    {
                        "name": "priceId",
                        "in": "path",
                        "description": "ID of price to add tax to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddTaxToPriceRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax added to price successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax added to price successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price or tax type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/prices/{priceId}/taxes/{taxTypeId}": {
            "delete": {
                "tags": [
                    "Prices"
                ],
                "summary": "Remove tax from price",
                "description": "Remove a tax from a price",
                "operationId": "39959af3a53fa85bbad481cdd41a6002",
                "parameters": [
                    {
                        "name": "priceId",
                        "in": "path",
                        "description": "ID of price to remove tax from",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "taxTypeId",
                        "in": "path",
                        "description": "ID of tax type to remove",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax removed from price successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax removed from price successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Price or tax type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/product-categories": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get all product categories",
                "description": "Retrieve a list of all product categories with optional status filter",
                "operationId": "1aad0578ae82a487e18c38de848b5da9",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter categories by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of product categories retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceProductCategoryResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Create new product category",
                "description": "Create a new product category",
                "operationId": "cc3ee56e438e2eb103f8587836f15883",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductCategoryRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product category created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceProductCategoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/product-categories/{id}": {
            "get": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Get product category by ID",
                "description": "Retrieve a specific product category by its ID",
                "operationId": "50ca79e47f1045ac290a40d82fd50243",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product category to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceProductCategoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Update product category",
                "description": "Update an existing product category",
                "operationId": "ea2c96a4f4e7f7032a2d92da18448d63",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product category to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductCategoryRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product category updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Delete product category",
                "description": "Delete a product category by ID",
                "operationId": "0d8765c4fbde71bfed17b4d3b2ec1d8d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product category to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product category deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Product category has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/product-categories/{id}/status": {
            "patch": {
                "tags": [
                    "Product Categories"
                ],
                "summary": "Update product category status",
                "description": "Update the status of an existing product category",
                "operationId": "43b49f3a56833b5581c0f8c8c5bc8f6b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product category to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductCategoryStatusRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product category status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product category status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product category not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get all products",
                "description": "Retrieve a list of all products with optional filters",
                "operationId": "ce72df82b76b3c6ed2d1d3459662e84e",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter products by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Filter products by category ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceProductResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create new product",
                "description": "Create a new product",
                "operationId": "2e879eb75fe9f8f9b365e1868dd8917d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProductRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceProductResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "description": "Retrieve a specific product by its ID",
                "operationId": "93a061da4ee79845f838bdffcfeea381",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceProductResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "description": "Update an existing product",
                "operationId": "dd390c5b4e70d9282a83f91bf5141690",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete product",
                "description": "Delete a product by ID",
                "operationId": "8230b099a31a960f55e2eeb30020540d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Product has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/products/{id}/status": {
            "patch": {
                "tags": [
                    "Products"
                ],
                "summary": "Update product status",
                "description": "Update the status of an existing product",
                "operationId": "92736c168dfdc9ae29a10cd83197d7b0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of product to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProductStatusRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Product status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/product-categories/{categoryId}/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get products by category",
                "description": "Retrieve a list of products belonging to a specific category",
                "operationId": "fddfbc634277a98cd2f8d8e72b450d1e",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "ID of category to filter products by",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter products by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products by category retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceProductResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/reports/generate": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Generate a report based on template and parameters",
                "description": "Generate a report",
                "operationId": "accb984b5854d5b8d474a9215b32fe39",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "report_template_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "My Revenue Report"
                                    },
                                    "parameters": {
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report generated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report generated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/SavedReport"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Report template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/saved-reports": {
            "get": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get all saved reports",
                "description": "Get all saved reports",
                "operationId": "a69683fa44a6e27ae40360dcf70b4a62",
                "parameters": [
                    {
                        "name": "report_template_id",
                        "in": "query",
                        "description": "Filter by report template ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "created_by",
                        "in": "query",
                        "description": "Filter by user ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date_from",
                        "in": "query",
                        "description": "Filter by date from",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "date_to",
                        "in": "query",
                        "description": "Filter by date to",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved reports retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/SavedReport"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/saved-reports?page=1"
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page_url": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/saved-reports?page=1"
                                                },
                                                "links": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "url": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "label": {
                                                                "type": "string",
                                                                "example": "&laquo; Previous"
                                                            },
                                                            "active": {
                                                                "type": "boolean",
                                                                "example": false
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "next_page_url": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/saved-reports"
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "prev_page_url": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/saved-reports/{id}": {
            "get": {
                "tags": [
                    "Reports"
                ],
                "summary": "Get a specific saved report",
                "description": "Get a specific saved report",
                "operationId": "2d1d4270517c54d47e76c94526b15ce4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved report ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved report retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/SavedReport"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Saved report not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved report not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Reports"
                ],
                "summary": "Delete a saved report",
                "description": "Delete a saved report",
                "operationId": "d3edb4b19c9409f07163d487865e1560",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved report ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Saved report deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved report deleted successfully"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Saved report not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved report not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/saved-reports/{id}/export": {
            "post": {
                "tags": [
                    "Reports"
                ],
                "summary": "Export a saved report",
                "description": "Export a saved report",
                "operationId": "f59a2363170e3c1b7c40fd9a4013725b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Saved report ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "format": {
                                        "type": "string",
                                        "enum": [
                                            "pdf",
                                            "excel",
                                            "csv"
                                        ],
                                        "example": "pdf"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Report exported successfully",
                        "headers": {
                            "Content-Disposition": {
                                "description": "Attachment filename",
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "Content-Type": {
                                "description": "Content type of the export",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Saved report not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Saved report not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid export format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid export format"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/dashboard/financial-summary": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get financial summary metrics",
                "description": "Get dashboard data",
                "operationId": "aa11ff0531256dc650c06a6626895845",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Dashboard data retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "total_revenue": {
                                                    "type": "number",
                                                    "example": 125000
                                                },
                                                "monthly_revenue": {
                                                    "type": "number",
                                                    "example": 15000
                                                },
                                                "overdue_payments": {
                                                    "type": "number",
                                                    "example": 3500
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/dashboard/payment-status": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get payment status metrics",
                "description": "Get payment status metrics",
                "operationId": "23a34cf57456c26e02e4f71da8917e91",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Dashboard data retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "status": {
                                                        "type": "string",
                                                        "example": "paid"
                                                    },
                                                    "count": {
                                                        "type": "integer",
                                                        "example": 125
                                                    },
                                                    "total_amount": {
                                                        "type": "number",
                                                        "example": 75000
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/dashboard/revenue-trends": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get revenue trend data",
                "description": "Get revenue trend data",
                "operationId": "a377e6cf25937280c978a58120787682",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Dashboard data retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "month": {
                                                        "type": "string",
                                                        "example": "2025-03"
                                                    },
                                                    "amount": {
                                                        "type": "number",
                                                        "example": 25000
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/dashboard/occupancy-revenue": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get occupancy vs revenue data",
                "description": "Get occupancy vs revenue data",
                "operationId": "785e91201195c3ce4b0cb4967499e13b",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Dashboard data retrieved successfully"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "month": {
                                                        "type": "string",
                                                        "example": "2025-03"
                                                    },
                                                    "occupancy_rate": {
                                                        "type": "number",
                                                        "example": 85.5
                                                    },
                                                    "revenue": {
                                                        "type": "number",
                                                        "example": 25000
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/report-templates": {
            "get": {
                "tags": [
                    "Report Templates"
                ],
                "summary": "Get all report templates",
                "description": "Get all report templates",
                "operationId": "756341ffb55c7fe4a846bb9c35716145",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by report type",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "is_system",
                        "in": "query",
                        "description": "Filter by system template flag",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search term",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report templates retrieved successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/ReportTemplate"
                                                    }
                                                },
                                                "first_page_url": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/report-templates?page=1"
                                                },
                                                "from": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page_url": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/report-templates?page=1"
                                                },
                                                "links": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "url": {
                                                                "type": "string",
                                                                "nullable": true
                                                            },
                                                            "label": {
                                                                "type": "string",
                                                                "example": "&laquo; Previous"
                                                            },
                                                            "active": {
                                                                "type": "boolean",
                                                                "example": false
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "next_page_url": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "path": {
                                                    "type": "string",
                                                    "example": "http://localhost/api/v1/report-templates"
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 15
                                                },
                                                "prev_page_url": {
                                                    "type": "string",
                                                    "nullable": true
                                                },
                                                "to": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Report Templates"
                ],
                "summary": "Create a new report template",
                "description": "Create a new report template",
                "operationId": "04d2c72cba3a7436fe3bbf1e107d8516",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Revenue by Season"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "revenue"
                                    },
                                    "config": {
                                        "type": "object"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/ReportTemplate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/report-templates/{id}": {
            "get": {
                "tags": [
                    "Report Templates"
                ],
                "summary": "Get a specific report template",
                "description": "Get a specific report template",
                "operationId": "5b3ba8da74b6f1a429c618355bf5c6c2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Report template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template retrieved successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/ReportTemplate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Report template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Report Templates"
                ],
                "summary": "Update a report template",
                "description": "Update a report template",
                "operationId": "194a80178c1808be54973fbf388ef2ef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Report template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Revenue by Season Updated"
                                    },
                                    "config": {
                                        "type": "object"
                                    },
                                    "status": {
                                        "type": "string",
                                        "example": "inactive"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Report template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/ReportTemplate"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Report template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden action",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot modify system templates"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Report Templates"
                ],
                "summary": "Delete a report template",
                "description": "Delete a report template",
                "operationId": "c59ae090d6ca23204c9583d4a69b6f3d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Report template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report template deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template deleted successfully"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Report template not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Report template not found"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden action",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Cannot delete system templates"
                                        },
                                        "data": {
                                            "type": "null"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/seasons": {
            "get": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Get all seasons",
                "description": "Retrieve a list of all seasons with optional status filter",
                "operationId": "5280faab0c709a5277707d4e4a5e470a",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter seasons by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of seasons retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Create new season",
                "description": "Create a new season",
                "operationId": "c57eb3da7c9e5ce6aaa2949e45fb520a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSeasonRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Season created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/seasons/{id}": {
            "get": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Get season by ID",
                "description": "Retrieve a specific season by its ID",
                "operationId": "ed7e2eee6fee12693b4e31705fa58b47",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Update season",
                "description": "Update an existing season",
                "operationId": "a35225c22c3b282762c50522483e4152",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSeasonRequestSchema"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Season updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Delete season",
                "description": "Delete a season by ID",
                "operationId": "0af5fcf6e8e2413462f5341845880910",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Season has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/seasons/{id}/status": {
            "patch": {
                "tags": [
                    "Seasons"
                ],
                "summary": "Update season status",
                "description": "Update the status of an existing season",
                "operationId": "54c8875f1042469e21438e320f980b5f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "inactive"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Season status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations": {
            "get": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Get all season registrations",
                "description": "Retrieve a list of all season registrations with optional filters",
                "operationId": "dcef35d78c74ea1c12dc521f31c96e0a",
                "parameters": [
                    {
                        "name": "guest_id",
                        "in": "query",
                        "description": "Filter by guest ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "apart_id",
                        "in": "query",
                        "description": "Filter by apart ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "season_code",
                        "in": "query",
                        "description": "Filter by season code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "cancelled",
                                "completed"
                            ]
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (format: Y-m-d)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (format: Y-m-d)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of season registrations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Create new season registration",
                "description": "Create a new season registration",
                "operationId": "0eecf017a2142b0b5e31911ca3d3f558",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guest_id",
                                    "apart_id",
                                    "season_code",
                                    "check_in_date",
                                    "check_out_date"
                                ],
                                "properties": {
                                    "guest_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "apart_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "season_code": {
                                        "type": "string",
                                        "example": "2425"
                                    },
                                    "check_in_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-09-01"
                                    },
                                    "check_out_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-30"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "cancelled",
                                            "completed"
                                        ],
                                        "example": "active"
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Special dietary requirements",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Season registration created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{id}": {
            "get": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Get season registration by ID",
                "description": "Retrieve a specific season registration by its ID",
                "operationId": "66ce951c5b330b483c15428a6f289804",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season registration retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Update season registration",
                "description": "Update an existing season registration",
                "operationId": "888fd68c3ec7fe2d1073d6cc68737fae",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "guest_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "apart_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "season_code": {
                                        "type": "string",
                                        "example": "2425"
                                    },
                                    "check_in_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-09-01"
                                    },
                                    "check_out_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-30"
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Special dietary requirements",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Season registration updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Delete season registration",
                "description": "Delete a season registration by ID",
                "operationId": "a0f95baa7f50d6711385c952b9116414",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season registration deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Season registration has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{id}/status": {
            "patch": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Update season registration status",
                "description": "Update the status of an existing season registration",
                "operationId": "5401002eea1cdc8bfc729b8253e78055",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "cancelled",
                                            "completed"
                                        ],
                                        "example": "completed"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Season registration status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{guestId}/season-registrations": {
            "get": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Get season registrations by guest",
                "description": "Retrieve a list of season registrations for a specific guest",
                "operationId": "3ddb314dc7f42211025d8b5ee4392ae3",
                "parameters": [
                    {
                        "name": "guestId",
                        "in": "path",
                        "description": "ID of guest to get registrations for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of season registrations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Guest not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds/{bedId}/season-registrations": {
            "get": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Get season registrations by bed",
                "description": "Retrieve a list of season registrations for a specific bed",
                "operationId": "5b0b27a201a6b68e62fc6671aea085b6",
                "parameters": [
                    {
                        "name": "bedId",
                        "in": "path",
                        "description": "ID of bed to get registrations for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of season registrations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Bed not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/seasons/{seasonCode}/registrations": {
            "get": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Get season registrations by season",
                "description": "Retrieve a list of season registrations for a specific season",
                "operationId": "b7f2aa93dae662c4e2f63251c2653572",
                "parameters": [
                    {
                        "name": "seasonCode",
                        "in": "path",
                        "description": "Code of season to get registrations for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of season registrations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Season not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/complete": {
            "post": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Create complete season registration",
                "description": "Create a complete season registration with products, payment plans, invoice titles, and discounts in one transaction",
                "operationId": "16efc15ff3f2f2f4daceb62af5643de6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guest_id",
                                    "apart_id",
                                    "season_code",
                                    "check_in_date",
                                    "check_out_date",
                                    "products",
                                    "payment_plans",
                                    "invoice_titles"
                                ],
                                "properties": {
                                    "guest_id": {
                                        "type": "integer",
                                        "example": 123
                                    },
                                    "apart_id": {
                                        "type": "integer",
                                        "example": 45
                                    },
                                    "season_code": {
                                        "type": "string",
                                        "example": "2425"
                                    },
                                    "check_in_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-15"
                                    },
                                    "check_out_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-22"
                                    },
                                    "deposit_amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 1000
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "VIP guest",
                                        "nullable": true
                                    },
                                    "products": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "product_id": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "quantity": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "unit_price": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1500
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "payment_plans": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "planned_amount": {
                                                    "type": "number",
                                                    "format": "float",
                                                    "example": 1000
                                                },
                                                "planned_date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-05-01"
                                                },
                                                "planned_payment_type_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "is_deposit": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "invoice_titles": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "title_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "individual",
                                                        "corporate"
                                                    ],
                                                    "example": "individual"
                                                },
                                                "first_name": {
                                                    "type": "string",
                                                    "example": "John"
                                                },
                                                "last_name": {
                                                    "type": "string",
                                                    "example": "Doe"
                                                },
                                                "identity_number": {
                                                    "type": "string",
                                                    "example": "12345678901"
                                                },
                                                "company_name": {
                                                    "type": "string",
                                                    "example": "Company Ltd"
                                                },
                                                "tax_office": {
                                                    "type": "string",
                                                    "example": "Tax Office"
                                                },
                                                "tax_number": {
                                                    "type": "string",
                                                    "example": "1234567890"
                                                },
                                                "address": {
                                                    "type": "string",
                                                    "example": "New York, USA",
                                                    "nullable": true
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "5551234567"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "example": "john@example.com"
                                                },
                                                "is_default": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "address_data": {
                                                    "properties": {
                                                        "country_id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "province_id": {
                                                            "type": "integer",
                                                            "example": 34
                                                        },
                                                        "district_id": {
                                                            "type": "integer",
                                                            "example": 123
                                                        },
                                                        "neighborhood": {
                                                            "type": "string",
                                                            "example": "Atatürk"
                                                        },
                                                        "street": {
                                                            "type": "string",
                                                            "example": "Barbaros Avenue"
                                                        },
                                                        "building_no": {
                                                            "type": "string",
                                                            "example": "14"
                                                        },
                                                        "apartment_no": {
                                                            "type": "string",
                                                            "example": "7"
                                                        },
                                                        "postal_code": {
                                                            "type": "string",
                                                            "example": "34758"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "discounts": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "discount_rule_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "product_id": {
                                                    "type": "integer",
                                                    "example": 5
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Complete season registration created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration successfully created"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 456
                                                },
                                                "guest_id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "season_code": {
                                                    "type": "string",
                                                    "example": "2425"
                                                },
                                                "apart_id": {
                                                    "type": "integer",
                                                    "example": 45
                                                },
                                                "check_in_date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-06-15"
                                                },
                                                "check_out_date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-06-22"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "active"
                                                },
                                                "products": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "payment_plans": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "invoice_titles": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to create season registration"
                                        },
                                        "errors": {
                                            "properties": {
                                                "guest_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The selected guest is invalid."
                                                    }
                                                },
                                                "products": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "At least one product must be selected."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Business rule validation failed"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/streamlined": {
            "post": {
                "tags": [
                    "Season Registrations"
                ],
                "summary": "Create streamlined season registration",
                "description": "Create a streamlined season registration with automatic guest creation/update, guardian management, and payment plan generation",
                "operationId": "bd7bf270b3454d31b9d11e23f309fe9e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "guest",
                                    "is_self_guardian",
                                    "bed_id",
                                    "season_code",
                                    "check_in_date",
                                    "check_out_date",
                                    "products",
                                    "invoice_titles"
                                ],
                                "properties": {
                                    "guest": {
                                        "required": [
                                            "tc_id",
                                            "first_name",
                                            "last_name",
                                            "birth_date",
                                            "gender",
                                            "nationality",
                                            "guest_type",
                                            "phone",
                                            "email",
                                            "emergency_contact",
                                            "address"
                                        ],
                                        "properties": {
                                            "tc_id": {
                                                "type": "string",
                                                "example": "12345678901"
                                            },
                                            "first_name": {
                                                "type": "string",
                                                "example": "Ali"
                                            },
                                            "last_name": {
                                                "type": "string",
                                                "example": "Yılmaz"
                                            },
                                            "birth_date": {
                                                "type": "string",
                                                "format": "date",
                                                "example": "2010-05-15"
                                            },
                                            "gender": {
                                                "type": "string",
                                                "enum": [
                                                    "male",
                                                    "female"
                                                ],
                                                "example": "male"
                                            },
                                            "nationality": {
                                                "type": "string",
                                                "example": "TC"
                                            },
                                            "guest_type": {
                                                "type": "string",
                                                "enum": [
                                                    "student",
                                                    "employee",
                                                    "other"
                                                ],
                                                "example": "student"
                                            },
                                            "education_level": {
                                                "type": "string",
                                                "example": "high_school"
                                            },
                                            "school_name": {
                                                "type": "string",
                                                "example": "Atatürk Lisesi"
                                            },
                                            "phone": {
                                                "type": "string",
                                                "example": "5321234567"
                                            },
                                            "email": {
                                                "type": "string",
                                                "format": "email",
                                                "example": "ali@example.com"
                                            },
                                            "special_notes": {
                                                "type": "string",
                                                "example": "Gıda alerjisi var"
                                            },
                                            "emergency_contact": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Ayşe Yılmaz"
                                                    },
                                                    "phone": {
                                                        "type": "string",
                                                        "example": "5331234568"
                                                    },
                                                    "relationship": {
                                                        "type": "string",
                                                        "example": "mother"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "address": {
                                                "properties": {
                                                    "country_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "province_id": {
                                                        "type": "integer",
                                                        "example": 34
                                                    },
                                                    "district_id": {
                                                        "type": "integer",
                                                        "example": 1530
                                                    },
                                                    "neighborhood": {
                                                        "type": "string",
                                                        "example": "Atatürk"
                                                    },
                                                    "street": {
                                                        "type": "string",
                                                        "example": "Cumhuriyet Caddesi"
                                                    },
                                                    "building_no": {
                                                        "type": "string",
                                                        "example": "123"
                                                    },
                                                    "apartment_no": {
                                                        "type": "string",
                                                        "example": "4"
                                                    },
                                                    "postal_code": {
                                                        "type": "string",
                                                        "example": "34000"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "is_self_guardian": {
                                        "type": "boolean",
                                        "example": false
                                    },
                                    "guardian": {
                                        "required": [
                                            "tc_id",
                                            "first_name",
                                            "last_name",
                                            "birth_date",
                                            "gender",
                                            "relationship_type",
                                            "phone",
                                            "email",
                                            "address"
                                        ],
                                        "properties": {
                                            "tc_id": {
                                                "type": "string",
                                                "example": "98765432109"
                                            },
                                            "first_name": {
                                                "type": "string",
                                                "example": "Mehmet"
                                            },
                                            "last_name": {
                                                "type": "string",
                                                "example": "Yılmaz"
                                            },
                                            "birth_date": {
                                                "type": "string",
                                                "format": "date",
                                                "example": "1975-10-20"
                                            },
                                            "gender": {
                                                "type": "string",
                                                "enum": [
                                                    "male",
                                                    "female"
                                                ],
                                                "example": "male"
                                            },
                                            "relationship_type": {
                                                "type": "string",
                                                "example": "parent"
                                            },
                                            "phone": {
                                                "type": "string",
                                                "example": "5331234567"
                                            },
                                            "email": {
                                                "type": "string",
                                                "format": "email",
                                                "example": "mehmet@example.com"
                                            },
                                            "occupation": {
                                                "type": "string",
                                                "example": "Öğretmen"
                                            },
                                            "workplace": {
                                                "type": "string",
                                                "example": "Atatürk İlkokulu"
                                            },
                                            "address": {
                                                "properties": {
                                                    "country_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "province_id": {
                                                        "type": "integer",
                                                        "example": 34
                                                    },
                                                    "district_id": {
                                                        "type": "integer",
                                                        "example": 1530
                                                    },
                                                    "neighborhood": {
                                                        "type": "string",
                                                        "example": "Atatürk"
                                                    },
                                                    "street": {
                                                        "type": "string",
                                                        "example": "Cumhuriyet Caddesi"
                                                    },
                                                    "building_no": {
                                                        "type": "string",
                                                        "example": "123"
                                                    },
                                                    "apartment_no": {
                                                        "type": "string",
                                                        "example": "4"
                                                    },
                                                    "postal_code": {
                                                        "type": "string",
                                                        "example": "34000"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "bed_id": {
                                        "type": "integer",
                                        "example": 45
                                    },
                                    "season_code": {
                                        "type": "string",
                                        "example": "2425"
                                    },
                                    "check_in_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-15"
                                    },
                                    "check_out_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-06-22"
                                    },
                                    "deposit_amount": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 1000
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "VIP misafir",
                                        "nullable": true
                                    },
                                    "products": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "product_id": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "quantity": {
                                                    "type": "integer",
                                                    "example": 1
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "invoice_titles": {
                                        "type": "array",
                                        "items": {
                                            "properties": {
                                                "title_type": {
                                                    "type": "string",
                                                    "enum": [
                                                        "individual",
                                                        "corporate"
                                                    ],
                                                    "example": "individual"
                                                },
                                                "first_name": {
                                                    "type": "string",
                                                    "example": "Mehmet"
                                                },
                                                "last_name": {
                                                    "type": "string",
                                                    "example": "Yılmaz"
                                                },
                                                "identity_number": {
                                                    "type": "string",
                                                    "example": "98765432109"
                                                },
                                                "company_name": {
                                                    "type": "string",
                                                    "example": "Company Ltd"
                                                },
                                                "tax_office": {
                                                    "type": "string",
                                                    "example": "Tax Office"
                                                },
                                                "tax_number": {
                                                    "type": "string",
                                                    "example": "1234567890"
                                                },
                                                "phone": {
                                                    "type": "string",
                                                    "example": "5551234567"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "format": "email",
                                                    "example": "john@example.com"
                                                },
                                                "is_default": {
                                                    "type": "boolean",
                                                    "example": true
                                                },
                                                "address": {
                                                    "properties": {
                                                        "country_id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "province_id": {
                                                            "type": "integer",
                                                            "example": 34
                                                        },
                                                        "district_id": {
                                                            "type": "integer",
                                                            "example": 1530
                                                        },
                                                        "neighborhood": {
                                                            "type": "string",
                                                            "example": "Atatürk"
                                                        },
                                                        "street": {
                                                            "type": "string",
                                                            "example": "Cumhuriyet Caddesi"
                                                        },
                                                        "building_no": {
                                                            "type": "string",
                                                            "example": "123"
                                                        },
                                                        "apartment_no": {
                                                            "type": "string",
                                                            "example": "4"
                                                        },
                                                        "postal_code": {
                                                            "type": "string",
                                                            "example": "34000"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Streamlined season registration created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration successfully created"
                                        },
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 456
                                                },
                                                "guest_id": {
                                                    "type": "integer",
                                                    "example": 123
                                                },
                                                "guardian_id": {
                                                    "type": "integer",
                                                    "example": 124
                                                },
                                                "season_code": {
                                                    "type": "string",
                                                    "example": "2425"
                                                },
                                                "bed_id": {
                                                    "type": "integer",
                                                    "example": 45
                                                },
                                                "check_in_date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-06-15"
                                                },
                                                "check_out_date": {
                                                    "type": "string",
                                                    "format": "date",
                                                    "example": "2025-06-22"
                                                },
                                                "status": {
                                                    "type": "string",
                                                    "example": "active"
                                                },
                                                "products": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "payment_plans": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "invoice_titles": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to create season registration"
                                        },
                                        "errors": {
                                            "properties": {
                                                "guest.tc_id": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "Invalid TC ID format."
                                                    }
                                                },
                                                "products": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "At least one product must be selected."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Business rule validation failed"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-products": {
            "get": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Get all season registration products",
                "description": "Retrieve a list of all season registration products with pagination",
                "operationId": "7144d1055b5c3e9cd3c7871701627df0",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of season registration products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationProductResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Create new season registration product",
                "description": "Create a new season registration product",
                "operationId": "e4bf28e4aa00ec28cbc47264b7fcdd2e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "season_registration_id",
                                    "product_id",
                                    "quantity"
                                ],
                                "properties": {
                                    "season_registration_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "price_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "unit_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100.5,
                                        "nullable": true
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Optional student discount applied",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Season registration product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration product created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonRegistrationProductResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-products/{id}": {
            "get": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Get season registration product by ID",
                "description": "Retrieve a specific season registration product by its ID",
                "operationId": "77931905828f2cf0ee6e57a9b8ee2ea0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration product to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season registration product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceSeasonRegistrationProductResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Update season registration product",
                "description": "Update an existing season registration product",
                "operationId": "5d09dbf6605f7844c86b74e9bc8cf6b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration product to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "season_registration_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "product_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "price_id": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "quantity": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "unit_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100.5
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Updated notes",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Season registration product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration product updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration product not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Delete season registration product",
                "description": "Delete a season registration product by ID",
                "operationId": "cadc90bb723db88e3801a0f88f3a109d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of season registration product to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Season registration product deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Season registration product deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Season registration product not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registrations/{registrationId}/products": {
            "get": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Get products by season registration",
                "description": "Retrieve a list of products for a specific season registration",
                "operationId": "3f5de669c3674120461e98c166e4ad4c",
                "parameters": [
                    {
                        "name": "registrationId",
                        "in": "path",
                        "description": "ID of season registration to get products for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationProductResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Season registration not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/products/{productId}/registrations": {
            "get": {
                "tags": [
                    "Season Registration Products"
                ],
                "summary": "Get registrations by product",
                "description": "Retrieve a list of season registrations for a specific product",
                "operationId": "8dafc63f5e66250e1f83e592aa72e224",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "ID of product to get registrations for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of registrations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceSeasonRegistrationProductResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-products/{productId}/discounts": {
            "get": {
                "tags": [
                    "Season Registration Product Discounts"
                ],
                "summary": "Get discounts for a season registration product",
                "description": "Returns a paginated list of discounts for a specific season registration product",
                "operationId": "getSeasonRegistrationProductDiscounts",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Season registration product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "discount_rule_id",
                        "in": "query",
                        "description": "Filter by discount rule ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "discount_type",
                        "in": "query",
                        "description": "Filter by discount type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "percentage",
                                "fixed"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SeasonRegistrationProductDiscount"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Season Registration Product Discounts"
                ],
                "summary": "Add a discount to a season registration product",
                "description": "Applies a discount to a season registration product",
                "operationId": "addDiscountToSeasonRegistrationProduct",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Season registration product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Discount data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "discount_rule_id"
                                ],
                                "properties": {
                                    "discount_rule_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "discount_type": {
                                        "type": "string",
                                        "enum": [
                                            "percentage",
                                            "fixed"
                                        ]
                                    },
                                    "discount_rate": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 10
                                    },
                                    "notes": {
                                        "type": "string",
                                        "example": "Special discount approved by manager"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/SeasonRegistrationProductDiscount"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-products/{productId}/discounts/{id}": {
            "put": {
                "tags": [
                    "Season Registration Product Discounts"
                ],
                "summary": "Update a discount for a season registration product",
                "description": "Updates an existing discount for a season registration product",
                "operationId": "updateSeasonRegistrationProductDiscount",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Season registration product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Discount data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "notes": {
                                        "type": "string",
                                        "example": "Special discount approved by manager"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/SeasonRegistrationProductDiscount"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Season Registration Product Discounts"
                ],
                "summary": "Remove a discount from a season registration product",
                "description": "Removes a discount from a season registration product",
                "operationId": "deleteSeasonRegistrationProductDiscount",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Season registration product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/season-registration-product-discounts/{id}": {
            "get": {
                "tags": [
                    "Season Registration Product Discounts"
                ],
                "summary": "Get a specific season registration product discount",
                "description": "Returns a specific discount by ID",
                "operationId": "getSeasonRegistrationProductDiscount",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Discount ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/SeasonRegistrationProductDiscount"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not found"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tax-types": {
            "get": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Get all tax types",
                "description": "Retrieve a list of all tax types with optional filters",
                "operationId": "7af7321ae148a8f626a1e7a508429907",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter tax types by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tax types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FinanceTaxTypeResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Create new tax type",
                "description": "Create a new tax type",
                "operationId": "11eb1166502f5000701403c7bdfa8606",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "tax_code",
                                    "percentage",
                                    "priority",
                                    "status"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the tax type",
                                        "type": "string",
                                        "example": "KDV"
                                    },
                                    "tax_code": {
                                        "description": "Unique code for the tax type",
                                        "type": "string",
                                        "example": "VAT"
                                    },
                                    "percentage": {
                                        "description": "Tax rate percentage (0-100)",
                                        "type": "number",
                                        "format": "float",
                                        "example": 18
                                    },
                                    "priority": {
                                        "description": "Priority for calculation order",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "description": {
                                        "description": "Description of the tax type",
                                        "type": "string",
                                        "example": "Katma Değer Vergisi"
                                    },
                                    "status": {
                                        "description": "Status of the tax type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax type created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceTaxTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tax-types/{id}": {
            "get": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Get tax type by ID",
                "description": "Retrieve a specific tax type by its ID",
                "operationId": "00c08c36d20e401743fd4c90eceff74f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tax type to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FinanceTaxTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Update tax type",
                "description": "Update an existing tax type",
                "operationId": "7c1f67805dae1fcede64dd0e0c905799",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tax type to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the tax type",
                                        "type": "string",
                                        "example": "KDV"
                                    },
                                    "tax_code": {
                                        "description": "Unique code for the tax type",
                                        "type": "string",
                                        "example": "VAT"
                                    },
                                    "percentage": {
                                        "description": "Tax rate percentage (0-100)",
                                        "type": "number",
                                        "format": "float",
                                        "example": 18
                                    },
                                    "priority": {
                                        "description": "Priority for calculation order",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "description": {
                                        "description": "Description of the tax type",
                                        "type": "string",
                                        "example": "Katma Değer Vergisi"
                                    },
                                    "status": {
                                        "description": "Status of the tax type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax type updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Delete tax type",
                "description": "Delete a tax type by ID",
                "operationId": "6aba46c15c87a22d0186fff015c2f8da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tax type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax type deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax type deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Tax type has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tax-types/{id}/status": {
            "patch": {
                "tags": [
                    "Tax Types"
                ],
                "summary": "Update tax type status",
                "description": "Update the status of an existing tax type",
                "operationId": "647ee04d6a94eee6329c0208f9493244",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tax type to update status",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "Status of the tax type (active/inactive)",
                                        "type": "string",
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax type status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tax type status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/access-logs": {
            "get": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Get all access logs",
                "description": "Retrieve a list of all access logs with filtering options",
                "operationId": "0a4569b6c27211f07dc1e4ef130ed245",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter by start date (Y-m-d)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "description": "Filter by end date (Y-m-d)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "action_type",
                        "in": "query",
                        "description": "Filter by action type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "CHECK_IN",
                                "CHECK_OUT"
                            ]
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by location",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of access logs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/access-logs": {
            "get": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Get access logs for a specific guest",
                "description": "Retrieve access logs for a specific guest",
                "operationId": "867e47bd31c6c1957c33154646490eee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest access logs retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/access/check-in": {
            "post": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Record guest check-in",
                "description": "Record a guest check-in event",
                "operationId": "5d43318ae86fd26044251a85e5b01cf8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [],
                                "properties": {
                                    "location": {
                                        "description": "Location of check-in",
                                        "type": "string"
                                    },
                                    "notes": {
                                        "description": "Additional notes",
                                        "type": "string"
                                    },
                                    "timestamp": {
                                        "description": "Timestamp for check-in (defaults to current time)",
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Check-in recorded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Check-in recorded successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "422": {
                        "description": "Validation error or business rule violation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/access/check-out": {
            "post": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Record guest check-out",
                "description": "Record a guest check-out event",
                "operationId": "89f26de1be3f4960bf32356b25f1c710",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [],
                                "properties": {
                                    "location": {
                                        "description": "Location of check-out",
                                        "type": "string"
                                    },
                                    "notes": {
                                        "description": "Additional notes",
                                        "type": "string"
                                    },
                                    "timestamp": {
                                        "description": "Timestamp for check-out (defaults to current time)",
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Check-out recorded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Check-out recorded successfully"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "422": {
                        "description": "Validation error or business rule violation"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/access-logs/current": {
            "get": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Get currently checked-in guests",
                "description": "Retrieve a list of guests that are currently checked in",
                "operationId": "038598d8ffd4736daa313bed61a1398f",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of currently checked-in guests retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/access-logs/metrics": {
            "get": {
                "tags": [
                    "Access Logs"
                ],
                "summary": "Get access metrics",
                "description": "Retrieve metrics about guest access",
                "operationId": "682294d044d616271df1abf3669a1a2c",
                "parameters": [
                    {
                        "name": "period",
                        "in": "query",
                        "description": "Period for metrics (day, week, month)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "day",
                            "enum": [
                                "day",
                                "week",
                                "month"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access metrics retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "properties": {
                                                "total_visits": {
                                                    "type": "integer"
                                                },
                                                "visits_by_date": {
                                                    "properties": {
                                                        "check_ins": {
                                                            "type": "object"
                                                        },
                                                        "check_outs": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "average_duration_minutes": {
                                                    "type": "number"
                                                },
                                                "peak_hours": {
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/people/{id}/documents": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Get all documents by owner",
                "description": "Retrieve a paginated list of all documents for a specific person",
                "operationId": "76f695989af6d745adea0dca803ec3d3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of person to get documents for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of documents retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DocumentResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/documents/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Get document by ID",
                "description": "Retrieve a specific document by ID",
                "operationId": "05c312d3ff69b4729a2abe90a6f7bdc9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DocumentResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Documents"
                ],
                "summary": "Delete document",
                "description": "Mark a document as deleted (soft delete)",
                "operationId": "fb70971f456416ab85906b319b894c5b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/documents/{id}/verify": {
            "post": {
                "tags": [
                    "Documents"
                ],
                "summary": "Verify document",
                "description": "Mark a document as verified",
                "operationId": "e2f97c3a4343752c5a8ac749fb13ba23",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document to verify",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "verification_date": {
                                        "description": "Date of verification",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "verified_by": {
                                        "description": "Name of person who verified the document",
                                        "type": "string"
                                    },
                                    "verification_notes": {
                                        "description": "Notes about the verification",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document verified successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document verified successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DocumentResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/documents/{id}/download": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Download document",
                "description": "Download a document file",
                "operationId": "5caaf54fcf10f480eb0304364e1a1237",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document to download",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document file",
                        "content": {
                            "application/octet-stream": {}
                        }
                    },
                    "404": {
                        "description": "Document not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/document-types": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Get all document types",
                "description": "Retrieve a paginated list of all document types",
                "operationId": "7d3cc4181ff257ef04a9bcaaf7019c37",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of document types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/DocumentTypeResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Create new document type",
                "description": "Create a new document type",
                "operationId": "9e0aadea5ed879c8aedbc79db4ef3c07",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Name of the document type",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the document type",
                                        "type": "string"
                                    },
                                    "template_path": {
                                        "description": "Path to template file",
                                        "type": "string"
                                    },
                                    "required_fields": {
                                        "description": "Required fields for document generation",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "is_system": {
                                        "description": "Whether this is a system document type",
                                        "type": "boolean"
                                    },
                                    "validity_period": {
                                        "description": "Validity period in days",
                                        "type": "integer"
                                    },
                                    "status": {
                                        "description": "Status of the document type",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Document type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document type created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DocumentTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/document-types/{id}": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Get document type by ID",
                "description": "Retrieve a specific document type by ID",
                "operationId": "fde6f1fb9ffe608dd2236a82107f681b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document type to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DocumentTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Update document type",
                "description": "Update an existing document type",
                "operationId": "2f709eeb884f6f3c5f3a8c7d3b92e2b9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document type to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Name of the document type",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Description of the document type",
                                        "type": "string"
                                    },
                                    "template_path": {
                                        "description": "Path to template file",
                                        "type": "string"
                                    },
                                    "required_fields": {
                                        "description": "Required fields for document generation",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "is_system": {
                                        "description": "Whether this is a system document type",
                                        "type": "boolean"
                                    },
                                    "validity_period": {
                                        "description": "Validity period in days",
                                        "type": "integer"
                                    },
                                    "status": {
                                        "description": "Status of the document type",
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document type updated successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/DocumentTypeResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document type not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Delete document type",
                "description": "Delete a specific document type",
                "operationId": "c3dcbfde4836acd6f21966bd49d1ffa2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document type to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document type deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document type not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Document type has associated documents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Document type has associated documents and cannot be deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardians": {
            "get": {
                "tags": [
                    "Guest Guardians"
                ],
                "summary": "Get all guardians by guest",
                "description": "Retrieve a list of all guardians for a specific guest",
                "operationId": "91c07ed9e55f8e962160c8a02c27a6ad",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest to get guardians for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of guardians retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuardianResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guest Guardians"
                ],
                "summary": "Create new guardian",
                "description": "Create a new guardian for a guest",
                "operationId": "5daff0a689c9677317de72afeeb962ac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "person_id",
                                    "relationship",
                                    "valid_from"
                                ],
                                "properties": {
                                    "person_id": {
                                        "description": "ID of the person to be set as guardian",
                                        "type": "integer"
                                    },
                                    "relationship": {
                                        "description": "Relationship to the guest",
                                        "type": "string"
                                    },
                                    "is_self": {
                                        "description": "Whether this is a self-guardian",
                                        "type": "boolean"
                                    },
                                    "is_emergency_contact": {
                                        "description": "Whether this is an emergency contact",
                                        "type": "boolean"
                                    },
                                    "valid_from": {
                                        "description": "Date when guardianship becomes valid",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "notes": {
                                        "description": "Additional notes about the guardian",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Guardian created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guardian created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/GuardianResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardians/{guardian_id}": {
            "put": {
                "tags": [
                    "Guest Guardians"
                ],
                "summary": "Update guardian",
                "description": "Update an existing guardian for a guest",
                "operationId": "596aa615f36a95b2d2ff7c883884ec9b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "guardian_id",
                        "in": "path",
                        "description": "ID of guardian to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "change_reason"
                                ],
                                "properties": {
                                    "relationship": {
                                        "description": "Relationship to the guest",
                                        "type": "string"
                                    },
                                    "is_emergency_contact": {
                                        "description": "Whether this is an emergency contact",
                                        "type": "boolean"
                                    },
                                    "notes": {
                                        "description": "Additional notes about the guardian",
                                        "type": "string"
                                    },
                                    "change_reason": {
                                        "description": "Reason for updating the guardian",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Guardian updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guardian updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guardian or guest not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardians/history": {
            "get": {
                "tags": [
                    "Guest Guardians"
                ],
                "summary": "Get guardian history (Legacy endpoint)",
                "description": "Retrieve the history of guardian changes for a guest. This is a legacy endpoint maintained for backward compatibility. New API clients should use the /guardian-history endpoint instead.",
                "operationId": "10dc995cfbe5c7f924a181ee74e50b9b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest to get guardian history for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guardian history retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuardianHistoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardians/{guardian_id}/status": {
            "patch": {
                "tags": [
                    "Guest Guardians"
                ],
                "summary": "Update guardian status",
                "description": "Update the status of a guardian",
                "operationId": "7aa107cc686824e9c7f2cb8187a06125",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "guardian_id",
                        "in": "path",
                        "description": "ID of guardian to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "New status",
                                        "type": "string",
                                        "enum": [
                                            "ACTIVE",
                                            "INACTIVE",
                                            "SUSPENDED"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Guardian status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guardian status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guardian or guest not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardian-history": {
            "get": {
                "tags": [
                    "Guest Guardian History"
                ],
                "summary": "Get guardian history by guest ID",
                "description": "Retrieve the complete history of guardian changes for a guest",
                "operationId": "eb65db90c552ae77d7d9dc21a6383e5f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest to get guardian history for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guardian history retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuardianHistoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/guardians/{guardian_id}/history": {
            "get": {
                "tags": [
                    "Guest Guardian History"
                ],
                "summary": "Get guardian history by guardian ID",
                "description": "Retrieve the history of changes for a specific guardian",
                "operationId": "9cd3e1cd1438bb4f5d044052ee1346c3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "guardian_id",
                        "in": "path",
                        "description": "ID of guardian to get history for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guardian history retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuardianHistoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guardian not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests": {
            "get": {
                "tags": [
                    "Guests"
                ],
                "summary": "Get all guests",
                "description": "Retrieve a list of all guests with optional filters",
                "operationId": "c7533e634e5a43119c233ab1ecb4abd4",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter guests by name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "guest_type",
                        "in": "query",
                        "description": "Filter guests by type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "STUDENT",
                                "EMPLOYEE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter guests by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACTIVE",
                                "INACTIVE",
                                "SUSPENDED"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of guests retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Guests"
                ],
                "summary": "Create new guest",
                "description": "Create a new guest",
                "operationId": "c0332ff19a8c2fc0fcef00c58269c5e2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGuestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Guest created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/GuestResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/search": {
            "get": {
                "tags": [
                    "Guests"
                ],
                "summary": "Search guests",
                "description": "Search guests by different criteria",
                "operationId": "adeeb26b01ad0904b2a06b6af66d92d1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Search by guest name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "guest_type",
                        "in": "query",
                        "description": "Filter by guest type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "STUDENT",
                                "EMPLOYEE",
                                "OTHER"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ACTIVE",
                                "INACTIVE",
                                "SUSPENDED"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/GuestResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}": {
            "get": {
                "tags": [
                    "Guests"
                ],
                "summary": "Get guest by ID",
                "description": "Retrieve a specific guest by its ID",
                "operationId": "3689bfd4a1461e51fcfa79ef0a094518",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/GuestResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Guests"
                ],
                "summary": "Update guest",
                "description": "Update an existing guest",
                "operationId": "021b9ad909e05d6c4b5f0fa1871648ef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of guest to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGuestRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Guest updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Guest updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/guests/{id}/status": {
            "patch": {
                "tags": [
                    "Guests"
                ],
                "summary": "Update guest status",
                "description": "Update the status of an existing guest",
                "operationId": "adf6ffdf2971b059ccb6fd92c7f5fd79",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Guest ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "description": "New status",
                                        "type": "string",
                                        "enum": [
                                            "ACTIVE",
                                            "INACTIVE",
                                            "SUSPENDED"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Status updated successfully"
                    },
                    "404": {
                        "description": "Guest not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/announcements": {
            "get": {
                "tags": [
                    "Announcements"
                ],
                "summary": "List announcements",
                "description": "Get a paginated list of announcements",
                "operationId": "8efee3bf0a30175ba698a4a6076dad48",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by announcement status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "draft",
                                "published",
                                "archived"
                            ]
                        }
                    },
                    {
                        "name": "priority",
                        "in": "query",
                        "description": "Filter by priority level",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "low",
                                "medium",
                                "high"
                            ]
                        }
                    },
                    {
                        "name": "apart_id",
                        "in": "query",
                        "description": "Filter by apart ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of announcements",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AnnouncementResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Announcements"
                ],
                "summary": "Create an announcement",
                "description": "Create a new announcement",
                "operationId": "646e5883e55c7e2522e16e92422aa311",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAnnouncementRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Announcement created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnnouncementResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/announcements/{id}": {
            "get": {
                "tags": [
                    "Announcements"
                ],
                "summary": "Get announcement details",
                "description": "Get detailed information about a specific announcement",
                "operationId": "0e5fbf25315a113c7a74c2a82db2cc3d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Announcement ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Announcement details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnnouncementResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Announcements"
                ],
                "summary": "Update an announcement",
                "description": "Update an existing announcement",
                "operationId": "130c34797f9d3ab2d797b42f77a7c846",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Announcement ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAnnouncementRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Announcement updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AnnouncementResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notification-channels": {
            "get": {
                "tags": [
                    "Notification Channels"
                ],
                "summary": "List notification channels",
                "description": "Get a paginated list of notification channels",
                "operationId": "173f1556d018b14b3db94d4e004c9877",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by channel status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter by channel type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "email",
                                "sms",
                                "push",
                                "whatsapp"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notification channels",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NotificationChannelResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Notification Channels"
                ],
                "summary": "Create a notification channel",
                "description": "Create a new notification channel",
                "operationId": "68e27c363c4b2d685dca89b052258d41",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNotificationChannelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Notification channel created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationChannelResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notification-channels/{id}": {
            "get": {
                "tags": [
                    "Notification Channels"
                ],
                "summary": "Get notification channel details",
                "description": "Get detailed information about a specific notification channel",
                "operationId": "f468f6d175068d6f53de9895b9d7952a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Channel ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification channel details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationChannelResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Notification Channels"
                ],
                "summary": "Update a notification channel",
                "description": "Update an existing notification channel",
                "operationId": "90f3d1ae1b10f89b1bd6827cb4e8a0fd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Channel ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNotificationChannelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification channel updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationChannelResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notifications/send": {
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Send a notification",
                "description": "Send a notification to a specific recipient",
                "operationId": "7e3e0e1acc9334b5441643f20d1783a1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendNotificationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notifications/schedule": {
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Schedule a notification",
                "description": "Schedule a notification to be sent at a specific time",
                "operationId": "feb1a678ac90195edc7b4e5ede5defad",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SendNotificationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification scheduled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "List notifications",
                "description": "Get a paginated list of notifications",
                "operationId": "2eb7762229652cb9b0e4852a21a76707",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by notification status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "pending",
                                "sent",
                                "scheduled",
                                "failed"
                            ]
                        }
                    },
                    {
                        "name": "recipient_type",
                        "in": "query",
                        "description": "Filter by recipient type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "user",
                                "guest",
                                "staff"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notifications",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NotificationResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notifications/{id}": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notification details",
                "description": "Get detailed information about a specific notification",
                "operationId": "d62cf870f02e07f0cff2ead0d58d20ca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Notification ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notification-templates": {
            "get": {
                "tags": [
                    "Notification Templates"
                ],
                "summary": "List notification templates",
                "description": "Get a paginated list of notification templates",
                "operationId": "e90e67eb779143a5af539798987c587f",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by template status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Filter by template code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notification templates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/NotificationTemplateResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Notification Templates"
                ],
                "summary": "Create a notification template",
                "description": "Create a new notification template",
                "operationId": "8ab438d86a0c2788f21ea6216974652a",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateNotificationTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Notification template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationTemplateResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/notification-templates/{id}": {
            "get": {
                "tags": [
                    "Notification Templates"
                ],
                "summary": "Get notification template details",
                "description": "Get detailed information about a specific notification template",
                "operationId": "68f5679928d57a3bbe79d469dd0cc994",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification template details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationTemplateResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Notification Templates"
                ],
                "summary": "Update a notification template",
                "description": "Update an existing notification template",
                "operationId": "9165c0e4cc7f3ffe2e688f774c23d427",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateNotificationTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Notification template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationTemplateResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds": {
            "get": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Get all beds",
                "description": "Retrieve a list of all beds with optional filters",
                "operationId": "374cc6fb9603bbc1a9b8657f7d65762f",
                "parameters": [
                    {
                        "name": "room_id",
                        "in": "query",
                        "description": "Filter beds by room ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter beds by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "available",
                                "occupied",
                                "maintenance"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of beds retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BedResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Create new bed",
                "description": "Create a new bed",
                "operationId": "c6db147ed7ea93c1fe5be7667c1790ff",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBedRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Bed created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bed created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BedResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds/{id}": {
            "get": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Get bed by ID",
                "description": "Retrieve a specific bed by its ID",
                "operationId": "3e2614f064be1401108efb8ea709fcaa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bed retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/BedResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bed not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Update bed",
                "description": "Update an existing bed",
                "operationId": "dd40f5d80d3d3f28570841697e5deaa3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateBedRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Bed updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bed updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bed not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Delete bed",
                "description": "Delete a bed by ID",
                "operationId": "ba2c658ee4f8f6d2d2343fbef8815c35",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bed deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Bed deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Bed is occupied"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds/{id}/features": {
            "get": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Get bed features",
                "description": "Retrieve all features assigned to a specific bed",
                "operationId": "a35516af23567483fe8c8b9b32db6d30",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to get features for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bed features retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FeatureResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Assign feature to bed",
                "description": "Assign a feature to a specific bed",
                "operationId": "bfe8713397cae7f3e1be3f0aa0b63fe3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to assign feature to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "feature_id"
                                ],
                                "properties": {
                                    "feature_id": {
                                        "description": "ID of the feature to assign",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "value": {
                                        "description": "Optional configuration values for the feature",
                                        "type": "object",
                                        "example": {
                                            "enabled": true,
                                            "priority": 1
                                        },
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature assigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds/{id}/inventory": {
            "get": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Get bed inventory",
                "description": "Retrieve all inventory items assigned to a specific bed",
                "operationId": "c4571871d5fc583ee52915d180eccf90",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to get inventory for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bed inventory retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/beds/{id}/features/{feature_id}": {
            "delete": {
                "tags": [
                    "3. Beds"
                ],
                "summary": "Remove feature from bed",
                "description": "Remove a feature from a specific bed",
                "operationId": "14ecfaea60b97f04bd78622b79960cbb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of bed to remove feature from",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "feature_id",
                        "in": "path",
                        "description": "ID of feature to remove",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature removed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/features": {
            "get": {
                "tags": [
                    "4. Features"
                ],
                "summary": "Get all features",
                "description": "Retrieve a paginated list of all room features with optional type filter",
                "operationId": "ee8c6ba33edb1da5e6a1ec8dd7428f72",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter features by type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ROOM",
                                "BED",
                                "APART",
                                "MIXED"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of features retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FeatureResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "4. Features"
                ],
                "summary": "Create new feature",
                "description": "Create a new room feature",
                "operationId": "72f81bf815180160fd41a6b20690af40",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateFeatureRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Feature created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FeatureResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/features/{id}": {
            "get": {
                "tags": [
                    "4. Features"
                ],
                "summary": "Get feature by ID",
                "description": "Retrieve a specific room feature by its ID",
                "operationId": "93254a312491e874b4a80e4993a1e8ea",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of feature to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FeatureResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "4. Features"
                ],
                "summary": "Update feature",
                "description": "Update an existing room feature",
                "operationId": "c0e316bb4a946309b75e8f319c312a24",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of feature to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateFeatureRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "4. Features"
                ],
                "summary": "Delete feature",
                "description": "Delete an existing room feature",
                "operationId": "1619f09222c43b3e582eead7658ff993",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of feature to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory": {
            "get": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Get all inventory items",
                "description": "Retrieve a list of all inventory items with optional filters",
                "operationId": "5a640368250e191b8b15c2b399e354e6",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "bed_id",
                        "in": "query",
                        "description": "Filter items by bed ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "room_id",
                        "in": "query",
                        "description": "Filter items by room ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "apart_id",
                        "in": "query",
                        "description": "Filter items by apart ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "item_type",
                        "in": "query",
                        "description": "Filter items by type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "furniture",
                                "appliance",
                                "linen",
                                "electronic",
                                "kitchenware",
                                "decoration"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter items by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "in_use",
                                "in_storage",
                                "maintenance",
                                "disposed"
                            ]
                        }
                    },
                    {
                        "name": "warranty_expired",
                        "in": "query",
                        "description": "Filter items by warranty status",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "tracking_number",
                        "in": "query",
                        "description": "Search by tracking number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assigned",
                        "in": "query",
                        "description": "Filter by assignment status (true=assigned, false=unassigned)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of inventory items retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryResource"
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": "integer"
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "links": {
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "url": {
                                                                "type": "string"
                                                            },
                                                            "label": {
                                                                "type": "string"
                                                            },
                                                            "active": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "path": {
                                                    "type": "string"
                                                },
                                                "per_page": {
                                                    "type": "integer"
                                                },
                                                "to": {
                                                    "type": "integer"
                                                },
                                                "total": {
                                                    "type": "integer"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Create new inventory item",
                "description": "Create a new inventory item. Note: Inventory items cannot be assigned during creation. Use dedicated assignment endpoints after creation.",
                "operationId": "ce1176be48d2f70cbf962c7484197108",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateInventoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Inventory item created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/InventoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/{id}": {
            "get": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Get inventory item by ID",
                "description": "Retrieve a specific inventory item by its ID",
                "operationId": "80b10d0acc9c364aa8043dae018922d8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/InventoryResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Update inventory item",
                "description": "Update an existing inventory item. Note: Inventory items cannot be assigned during update. Use dedicated assignment endpoints instead.",
                "operationId": "d97fd884178befedad11d068b6660970",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateInventoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Inventory item updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Delete inventory item",
                "description": "Delete an existing inventory item",
                "operationId": "6c03ed5b4e1331eea3885e540793c9c6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/{id}/assign-to-bed/{bed_id}": {
            "post": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Assign inventory item to a bed",
                "description": "Assign an inventory item to a specific bed. This is the only way to assign inventory items to beds.",
                "operationId": "d4989d905e4965624d92fcd03f27da2c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to assign",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "bed_id",
                        "in": "path",
                        "description": "ID of the bed to assign the item to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item assigned to bed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item or bed not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/{id}/assign-to-apart/{apart_id}": {
            "post": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Assign inventory item to an apart",
                "description": "Assign an inventory item to a specific apart. This is the only way to assign inventory items to aparts.",
                "operationId": "3c80c79201a43b34667510c26a109b32",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to assign",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "apart_id",
                        "in": "path",
                        "description": "ID of the apart to assign the item to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item assigned to apart successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item or apart not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/{id}/assign-to-room/{room_id}": {
            "post": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Assign inventory item to a room",
                "description": "Assign an inventory item to a specific room. This is the only way to assign inventory items to rooms.",
                "operationId": "461a8264e22416515cf823b720798f23",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to assign",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "room_id",
                        "in": "path",
                        "description": "ID of the room to assign the item to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item assigned to room successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item or room not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/{id}/unassign": {
            "post": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Unassign inventory item",
                "description": "Remove the assignment of an inventory item",
                "operationId": "f388714b79dc94693ef0a59462421917",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of inventory item to unassign",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inventory item unassigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Inventory item unassigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Inventory item not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/status-options": {
            "get": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Get inventory status options",
                "description": "Get all valid status options for inventory items",
                "operationId": "cbf332e1c5ef4c3cb2423abbbb990139",
                "responses": {
                    "200": {
                        "description": "Status options retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/inventory/type-options": {
            "get": {
                "tags": [
                    "5. Inventory"
                ],
                "summary": "Get inventory type options",
                "description": "Get all valid type options for inventory items",
                "operationId": "31845021cd260779de170a40085b05b7",
                "responses": {
                    "200": {
                        "description": "Type options retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/rooms": {
            "get": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Get all rooms",
                "description": "Retrieve a list of all rooms with optional filters",
                "operationId": "a2489c7535195272bc33205cff882612",
                "parameters": [
                    {
                        "name": "apart_id",
                        "in": "query",
                        "description": "Filter rooms by apart ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "floor",
                        "in": "query",
                        "description": "Filter rooms by floor (requires apart_id)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter rooms by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive",
                                "maintenance"
                            ]
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of rooms retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RoomResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Create new room",
                "description": "Create a new room",
                "operationId": "488f38a4f83e060d362ba4222d396eaf",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRoomRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Room created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Room created successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/RoomResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/rooms/{id}": {
            "get": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Get room by ID",
                "description": "Retrieve a specific room by its ID",
                "operationId": "10f0bcc78fc705289037553c6a98a552",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/RoomResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Room not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Update room",
                "description": "Update an existing room",
                "operationId": "247918a6e73131ba9ff1e94568271453",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateRoomRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Room updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Room updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Room not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Delete room",
                "description": "Delete a room by ID",
                "operationId": "6ca9e4357f0ae691ea4ea67aee19accb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Room deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    },
                    "409": {
                        "description": "Conflict - Room has dependencies"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/rooms/{id}/features": {
            "get": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Get room features",
                "description": "Retrieve all features assigned to a specific room",
                "operationId": "4b02c0dfd06cc071942e4d2e104f5397",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to get features for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room features retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FeatureResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Assign feature to room",
                "description": "Assign a feature to a specific room",
                "operationId": "56e5133c3a160656cf78ec57ea07c66f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to assign feature to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "feature_id"
                                ],
                                "properties": {
                                    "feature_id": {
                                        "description": "ID of the feature to assign",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "value": {
                                        "description": "Optional configuration values for the feature",
                                        "type": "object",
                                        "example": {
                                            "enabled": true,
                                            "priority": 1
                                        },
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature assigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/rooms/{id}/features/{feature_id}": {
            "delete": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Remove feature from room",
                "description": "Remove a feature from a specific room",
                "operationId": "d8ea26e1c47a1327ead65f2bb56911d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to remove feature from",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "feature_id",
                        "in": "path",
                        "description": "ID of feature to remove",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature removed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/rooms/{id}/inventory": {
            "get": {
                "tags": [
                    "2. Rooms"
                ],
                "summary": "Get room inventory",
                "description": "Retrieve all inventory items assigned to a specific room",
                "operationId": "68a28ff02b937e18475b32b61777d054",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of room to get inventory for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room inventory retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts": {
            "get": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Get all aparts",
                "description": "Retrieve a paginated list of all aparts with optional filters",
                "operationId": "c985f3ada59960fdccf8e0ae748baf1a",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of items per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "firm_id",
                        "in": "query",
                        "description": "Filter aparts by firm ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gender_type",
                        "in": "query",
                        "description": "Filter aparts by gender type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MALE",
                                "FEMALE",
                                "MIXED"
                            ]
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter aparts by status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "active",
                                "inactive"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of aparts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApartListResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Create new apart",
                "description": "Create a new apart",
                "operationId": "fe36a4a999b048fa1f286021cc1e49a1",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "firm_id",
                                    "name",
                                    "address",
                                    "gender_type"
                                ],
                                "properties": {
                                    "firm_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Golden Aparthouse"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "123 Main St, Istanbul"
                                    },
                                    "gender_type": {
                                        "type": "string",
                                        "enum": [
                                            "MALE",
                                            "FEMALE",
                                            "MIXED"
                                        ],
                                        "example": "MIXED"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    },
                                    "opening_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-02-15"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Apart created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/ApartSingleResponse"
                                        },
                                        {
                                            "properties": {
                                                "message": {
                                                    "type": "string",
                                                    "example": "Apart created successfully"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts/{id}": {
            "get": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Get apart by ID",
                "description": "Retrieve a specific apart by its ID",
                "operationId": "ae0edb6483bbaccf41f18710369114d3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Apart retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApartSingleResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Update apart",
                "description": "Update an existing apart",
                "operationId": "5709e086ded4d1842d3f00dfbbfc9b57",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateApartRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Apart updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Apart updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Delete apart",
                "description": "Delete an existing apart by ID",
                "operationId": "6fd2e5aaa260f96c03a807e343808f25",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Apart deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Apart deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts/{id}/features": {
            "get": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Get apart features",
                "description": "Retrieve all features assigned to a specific apart",
                "operationId": "ca898664a33d357d2f593ea93f2ff989",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to get features for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Apart features retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FeatureResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts/{id}/features/{featureId}": {
            "post": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Assign feature to apart",
                "description": "Assign a feature to a specific apart",
                "operationId": "24e17781553286ca9e99289971c82d15",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to assign feature to",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "ID of feature to assign",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature assigned successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Remove feature from apart",
                "description": "Remove a feature from a specific apart",
                "operationId": "761600ad59442e2812241c97c4cbe12e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to remove feature from",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "featureId",
                        "in": "path",
                        "description": "ID of feature to remove",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Feature removed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/aparts/{id}/inventory": {
            "get": {
                "tags": [
                    "1. Aparts"
                ],
                "summary": "Get apart inventory",
                "description": "Retrieve all inventory items assigned to a specific apart",
                "operationId": "d90d423ac732a60fd39f959d3e2934ff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of apart to get inventory for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Apart inventory retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/firms": {
            "get": {
                "tags": [
                    "Firms"
                ],
                "summary": "Tüm firmaları listeler",
                "description": "Sistemdeki tüm firmaları sayfalı olarak listeler",
                "operationId": "c538c282dd2cf58a4416d79171dcfdd7",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Sayfa numarası",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Sayfa başına gösterilecek kayıt sayısı",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Firmalar başarıyla listelendi",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FirmResource"
                                            }
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/PaginationLinks"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Firms"
                ],
                "summary": "Yeni firma oluşturur",
                "description": "Yeni bir firma kaydı oluşturur",
                "operationId": "40d0bffcad23b4c50f86fcdd49c2c866",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "tax_number",
                                    "status"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Örnek Firma A.Ş."
                                    },
                                    "tax_number": {
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "Örnek Mah. Test Sok. No:1 Kadıköy/İstanbul"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+90 555 123 4567"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "info@ornekfirma.com"
                                    },
                                    "tax_office": {
                                        "type": "string",
                                        "example": "Kadıköy Vergi Dairesi"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Firma başarıyla oluşturuldu",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Firma başarıyla oluşturuldu"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FirmResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/firms/{id}": {
            "get": {
                "tags": [
                    "Firms"
                ],
                "summary": "Firma detaylarını getirir",
                "description": "Belirtilen ID'ye sahip firmanın detaylarını getirir",
                "operationId": "65b0d8759539673f3e333aa484159e96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Firma ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Firma detayları başarıyla getirildi",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FirmResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Firms"
                ],
                "summary": "Firma bilgilerini günceller",
                "description": "Belirtilen ID'ye sahip firmanın bilgilerini günceller",
                "operationId": "6e19c63253d54b155ac961ed29f224d5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Firma ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "tax_number",
                                    "status"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Örnek Firma A.Ş."
                                    },
                                    "tax_number": {
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "Örnek Mah. Test Sok. No:1 Kadıköy/İstanbul"
                                    },
                                    "phone": {
                                        "type": "string",
                                        "example": "+90 555 123 4567"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "info@ornekfirma.com"
                                    },
                                    "tax_office": {
                                        "type": "string",
                                        "example": "Kadıköy Vergi Dairesi"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "active",
                                            "inactive"
                                        ],
                                        "example": "active"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Firma başarıyla güncellendi",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Firma başarıyla güncellendi"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FirmResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationError"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Firms"
                ],
                "summary": "Firma kaydını siler",
                "description": "Belirtilen ID'ye sahip firmayı siler",
                "operationId": "ac288c4564567fe6b00de0294e61c09c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Firma ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Firma başarıyla silindi",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Firma başarıyla silindi"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        },
        "/api/v1/tenants": {
            "get": {
                "tags": [
                    "Tenants"
                ],
                "summary": "Get all tenants",
                "description": "Retrieve a list of all tenants",
                "operationId": "298bef1d607993edfd3016961e301757",
                "responses": {
                    "200": {
                        "description": "List of tenants retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TenantResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tenants"
                ],
                "summary": "Create new tenant with super admin",
                "description": "Create a new tenant and its super admin user",
                "operationId": "b744bfb1adf620c8a39b5ccd362452e7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "domain",
                                    "admin_name",
                                    "admin_email",
                                    "admin_password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Example Company"
                                    },
                                    "domain": {
                                        "type": "string",
                                        "example": "example.blexi.com"
                                    },
                                    "admin_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "admin_email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "admin@example.com"
                                    },
                                    "admin_password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tenant created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tenant created successfully"
                                        },
                                        "data": {
                                            "properties": {
                                                "tenant": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Example Company"
                                                        },
                                                        "domain": {
                                                            "type": "string",
                                                            "example": "example.blexi.com"
                                                        },
                                                        "status": {
                                                            "type": "string",
                                                            "example": "active"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "super_admin": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 1
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "admin@example.com"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "The given data was invalid"
                                        },
                                        "errors": {
                                            "properties": {
                                                "domain": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The domain has already been taken."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tenants/{id}": {
            "get": {
                "tags": [
                    "Tenants"
                ],
                "summary": "Get tenant by ID",
                "description": "Retrieve a specific tenant by its ID",
                "operationId": "d0782cd6a98a84514974ec1abee49707",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tenant to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tenant retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/TenantResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tenants"
                ],
                "summary": "Update tenant",
                "description": "Update an existing tenant",
                "operationId": "f6e66d314383eda5d93d3de81c39ad97",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of tenant to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTenantRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tenant updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Tenant updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "jwt": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorResponse": {
                "title": "Hata Yanıtı",
                "description": "Standart hata yanıt formatı",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "message": {
                        "type": "string",
                        "example": "Bir hata oluştu"
                    },
                    "errors": {
                        "type": "object",
                        "example": {
                            "alan": [
                                "Bu alan zorunludur."
                            ]
                        },
                        "nullable": true,
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "number": {
                        "type": "string",
                        "example": "INV-2024-001"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "status": {
                        "type": "string",
                        "example": "draft"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-31"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PaymentResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "status": {
                        "type": "string",
                        "example": "pending"
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-31"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FinanceCreatePaymentRequest": {
                "required": [
                    "guest_id",
                    "payment_type_id",
                    "amount",
                    "payment_date"
                ],
                "properties": {
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-31"
                    }
                },
                "type": "object"
            },
            "FinanceUpdatePaymentRequest": {
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "completed"
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-31"
                    }
                },
                "type": "object"
            },
            "PaymentTypeResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "code": {
                        "type": "string",
                        "example": "credit_card"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreatePaymentTypeRequest": {
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "code": {
                        "type": "string",
                        "example": "credit_card"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdatePaymentTypeRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "example": "inactive"
                    }
                },
                "type": "object"
            },
            "PaymentPlanResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "total_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "installment_count": {
                        "type": "integer",
                        "example": 5
                    },
                    "installment_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreatePaymentPlanRequest": {
                "required": [
                    "guest_id",
                    "total_amount",
                    "installment_count",
                    "start_date"
                ],
                "properties": {
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "total_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "installment_count": {
                        "type": "integer",
                        "example": 5
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    }
                },
                "type": "object"
            },
            "UpdatePaymentPlanRequest": {
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "completed"
                    }
                },
                "type": "object"
            },
            "ProductResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Standard Room"
                    },
                    "description": {
                        "type": "string",
                        "example": "Standard room with basic amenities"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 100
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreateProductRequest": {
                "required": [
                    "category_id",
                    "name",
                    "price"
                ],
                "properties": {
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Standard Room"
                    },
                    "description": {
                        "type": "string",
                        "example": "Standard room with basic amenities"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 100
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "UpdateProductRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Standard Room"
                    },
                    "description": {
                        "type": "string",
                        "example": "Standard room with basic amenities"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 100
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "ProductCategoryResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Rooms"
                    },
                    "description": {
                        "type": "string",
                        "example": "Room types and categories"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreateProductCategoryRequest": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Rooms"
                    },
                    "description": {
                        "type": "string",
                        "example": "Room types and categories"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "UpdateProductCategoryRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Rooms"
                    },
                    "description": {
                        "type": "string",
                        "example": "Room types and categories"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "SeasonResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Summer 2024"
                    },
                    "description": {
                        "type": "string",
                        "example": "Summer season for 2024"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-01"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-31"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreateSeasonRequest": {
                "required": [
                    "name",
                    "start_date",
                    "end_date"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Summer 2024"
                    },
                    "description": {
                        "type": "string",
                        "example": "Summer season for 2024"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-01"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-31"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "UpdateSeasonRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Summer 2024"
                    },
                    "description": {
                        "type": "string",
                        "example": "Summer season for 2024"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-01"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-31"
                    },
                    "is_active": {
                        "type": "boolean",
                        "example": true
                    }
                },
                "type": "object"
            },
            "SeasonRegistrationResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "season_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-15"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-15"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CreateSeasonRegistrationRequest": {
                "required": [
                    "season_id",
                    "guest_id",
                    "start_date",
                    "end_date"
                ],
                "properties": {
                    "season_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-15"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-15"
                    }
                },
                "type": "object"
            },
            "UpdateSeasonRegistrationRequest": {
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "completed"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-15"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-15"
                    }
                },
                "type": "object"
            },
            "NotificationResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "template_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "recipient_type": {
                        "type": "string",
                        "enum": [
                            "user",
                            "guest",
                            "staff"
                        ],
                        "example": "guest"
                    },
                    "recipient_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "type": "string",
                        "example": "Room Cleaning Notification"
                    },
                    "content": {
                        "type": "string",
                        "example": "Your room cleaning is scheduled for today at 14:00"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "email",
                            "sms"
                        ]
                    },
                    "scheduled_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "sent",
                            "scheduled",
                            "failed"
                        ],
                        "example": "pending"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "NotificationTemplateResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Room Cleaning Template"
                    },
                    "code": {
                        "type": "string",
                        "example": "ROOM_CLEANING"
                    },
                    "title": {
                        "type": "string",
                        "example": "Room Cleaning Notification"
                    },
                    "content": {
                        "type": "string",
                        "example": "Your room cleaning is scheduled for {time}"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "email",
                            "sms"
                        ]
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "time"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "NotificationChannelResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Email Channel"
                    },
                    "code": {
                        "type": "string",
                        "example": "EMAIL"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "email",
                            "sms",
                            "push",
                            "whatsapp"
                        ],
                        "example": "email"
                    },
                    "config": {
                        "type": "object",
                        "example": {
                            "host": "smtp.example.com",
                            "port": 587
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "AnnouncementResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "example": "Important Maintenance Notice"
                    },
                    "content": {
                        "type": "string",
                        "example": "Building maintenance will be performed on..."
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "medium"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "SendNotificationRequest": {
                "required": [
                    "tenant_id",
                    "template_id",
                    "recipient_type",
                    "recipient_id",
                    "channels"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "template_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "recipient_type": {
                        "type": "string",
                        "enum": [
                            "user",
                            "guest",
                            "staff"
                        ],
                        "example": "guest"
                    },
                    "recipient_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "variables": {
                        "type": "object",
                        "example": {
                            "time": "14:00"
                        }
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "email",
                            "sms"
                        ]
                    },
                    "scheduled_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateNotificationTemplateRequest": {
                "required": [
                    "tenant_id",
                    "name",
                    "code",
                    "title",
                    "content",
                    "channels",
                    "variables",
                    "status"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Room Cleaning Template"
                    },
                    "code": {
                        "type": "string",
                        "example": "ROOM_CLEANING"
                    },
                    "title": {
                        "type": "string",
                        "example": "Room Cleaning Notification"
                    },
                    "content": {
                        "type": "string",
                        "example": "Your room cleaning is scheduled for {time}"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "email",
                            "sms"
                        ]
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "time"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateNotificationTemplateRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Updated Room Cleaning Template"
                    },
                    "title": {
                        "type": "string",
                        "example": "Updated Room Cleaning Notification"
                    },
                    "content": {
                        "type": "string",
                        "example": "Your room cleaning has been scheduled for {time}"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "email",
                            "sms",
                            "push"
                        ]
                    },
                    "variables": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "time"
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "inactive"
                    }
                },
                "type": "object"
            },
            "CreateNotificationChannelRequest": {
                "required": [
                    "tenant_id",
                    "name",
                    "code",
                    "type",
                    "config",
                    "status"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Email Channel"
                    },
                    "code": {
                        "type": "string",
                        "example": "EMAIL"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "email",
                            "sms",
                            "push",
                            "whatsapp"
                        ],
                        "example": "email"
                    },
                    "config": {
                        "type": "object",
                        "example": {
                            "host": "smtp.example.com",
                            "port": 587
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateNotificationChannelRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Updated Email Channel"
                    },
                    "config": {
                        "type": "object",
                        "example": {
                            "host": "new-smtp.example.com",
                            "port": 465
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "inactive"
                    }
                },
                "type": "object"
            },
            "CreateAnnouncementRequest": {
                "required": [
                    "tenant_id",
                    "title",
                    "content",
                    "start_date",
                    "end_date",
                    "priority",
                    "status"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "example": "Important Maintenance Notice"
                    },
                    "content": {
                        "type": "string",
                        "example": "Building maintenance will be performed on..."
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "medium"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "draft"
                    }
                },
                "type": "object"
            },
            "UpdateAnnouncementRequest": {
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Updated Maintenance Notice"
                    },
                    "content": {
                        "type": "string",
                        "example": "Updated: Building maintenance will be performed on..."
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "high"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    }
                },
                "type": "object"
            },
            "PaginationLinks": {
                "title": "Pagination Links",
                "description": "Links for pagination navigation",
                "properties": {
                    "first": {
                        "type": "string",
                        "example": "https://api.blexi.co/api/v1/users?page=1"
                    },
                    "last": {
                        "type": "string",
                        "example": "https://api.blexi.co/api/v1/users?page=10"
                    },
                    "prev": {
                        "type": "string",
                        "example": null,
                        "nullable": true
                    },
                    "next": {
                        "type": "string",
                        "example": "https://api.blexi.co/api/v1/users?page=2"
                    }
                },
                "type": "object"
            },
            "PaginationMeta": {
                "title": "Pagination Metadata",
                "description": "Metadata for pagination",
                "properties": {
                    "current_page": {
                        "type": "integer",
                        "example": 1
                    },
                    "from": {
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "type": "integer",
                        "example": 10
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "https://api.blexi.co/api/v1/users?page=1",
                                    "nullable": true
                                },
                                "label": {
                                    "type": "string",
                                    "example": "1"
                                },
                                "active": {
                                    "type": "boolean",
                                    "example": true
                                }
                            },
                            "type": "object"
                        }
                    },
                    "path": {
                        "type": "string",
                        "example": "https://api.blexi.co/api/v1/users"
                    },
                    "per_page": {
                        "type": "integer",
                        "example": 15
                    },
                    "to": {
                        "type": "integer",
                        "example": 15
                    },
                    "total": {
                        "type": "integer",
                        "example": 150
                    }
                },
                "type": "object"
            },
            "CreateCleaningRequest": {
                "title": "Create Cleaning Request",
                "description": "Request body for creating a new cleaning task",
                "required": [
                    "tenant_id",
                    "apart_id",
                    "room_id",
                    "title",
                    "description",
                    "priority",
                    "due_date"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "room_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "type": "string",
                        "example": "Room 101 Deep Cleaning"
                    },
                    "description": {
                        "type": "string",
                        "example": "Complete deep cleaning of room"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "high"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateCleaningRequest": {
                "title": "Update Cleaning Request",
                "description": "Request body for updating an existing cleaning task",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Updated: Room 101 Deep Cleaning"
                    },
                    "description": {
                        "type": "string",
                        "example": "Updated cleaning requirements"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "medium"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateMaintenanceRequest": {
                "title": "Create Maintenance Request",
                "description": "Request body for creating a new maintenance task",
                "required": [
                    "tenant_id",
                    "apart_id",
                    "room_id",
                    "title",
                    "description",
                    "priority",
                    "due_date"
                ],
                "properties": {
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "room_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "type": "string",
                        "example": "Fix AC in Room 101"
                    },
                    "description": {
                        "type": "string",
                        "example": "AC not cooling properly"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "high"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateMaintenanceRequest": {
                "title": "Update Maintenance Request",
                "description": "Request body for updating an existing maintenance task",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Updated: Fix AC in Room 101"
                    },
                    "description": {
                        "type": "string",
                        "example": "AC needs complete replacement"
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "example": "high"
                    },
                    "due_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "notes": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "AddressResource": {
                "title": "Address Resource",
                "description": "Address resource representation",
                "properties": {
                    "id": {
                        "description": "Resource for Address model",
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "country_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "province_id": {
                        "type": "integer",
                        "example": 34
                    },
                    "district_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "neighborhood": {
                        "type": "string",
                        "example": "Caddebostan",
                        "nullable": true
                    },
                    "street": {
                        "type": "string",
                        "example": "Bağdat Caddesi",
                        "nullable": true
                    },
                    "building_no": {
                        "type": "string",
                        "example": "123",
                        "nullable": true
                    },
                    "apartment_no": {
                        "type": "string",
                        "example": "4",
                        "nullable": true
                    },
                    "postal_code": {
                        "type": "string",
                        "example": "34728",
                        "nullable": true
                    },
                    "address_type": {
                        "type": "string",
                        "enum": [
                            "home",
                            "work",
                            "other"
                        ],
                        "example": "home"
                    },
                    "is_default": {
                        "type": "boolean",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "formatted_address": {
                        "type": "string",
                        "example": "Bağdat Caddesi, No: 123, Daire: 4, Caddebostan Mah., Kadıköy, İstanbul, 34728, Turkey"
                    },
                    "country": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CountryResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "province": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ProvinceResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "district": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/DistrictResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CountryResource": {
                "title": "Country Resource",
                "description": "Country resource representation",
                "properties": {
                    "id": {
                        "description": "Resource for Country model",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "type": "string",
                        "example": "TUR"
                    },
                    "name": {
                        "type": "string",
                        "example": "Turkey"
                    },
                    "phone_code": {
                        "type": "string",
                        "example": "+90"
                    }
                },
                "type": "object"
            },
            "DistrictResource": {
                "title": "District Resource",
                "description": "District resource representation",
                "properties": {
                    "id": {
                        "description": "Resource for District model",
                        "type": "integer",
                        "example": 1
                    },
                    "province_id": {
                        "type": "integer",
                        "example": 34
                    },
                    "name": {
                        "type": "string",
                        "example": "Kadıköy"
                    },
                    "province": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ProvinceResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ProvinceResource": {
                "title": "Province Resource",
                "description": "Province resource representation",
                "properties": {
                    "id": {
                        "description": "Resource for Province model",
                        "type": "integer",
                        "example": 34
                    },
                    "country_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "type": "string",
                        "example": "34"
                    },
                    "name": {
                        "type": "string",
                        "example": "İstanbul"
                    },
                    "country": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CountryResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UserResource": {
                "title": "User Resource",
                "description": "User resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "example": "johndoe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant": {
                        "$ref": "#/components/schemas/TenantResource"
                    },
                    "person_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "person": {
                        "$ref": "#/components/schemas/PersonResource"
                    },
                    "role": {
                        "type": "string",
                        "example": "admin"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "users.create",
                            "users.update"
                        ]
                    },
                    "last_login": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01 12:00:00"
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01 12:00:00"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01 12:00:00"
                    }
                },
                "type": "object"
            },
            "CreatePersonRequestSchema": {
                "required": [
                    "name",
                    "tc_no",
                    "phone",
                    "birth_date"
                ],
                "properties": {
                    "name": {
                        "description": "Person's first name",
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "description": "Person's last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "tc_no": {
                        "description": "Turkish Citizenship Number (11 digits)",
                        "type": "string",
                        "example": "12345678901"
                    },
                    "phone": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "+905555555555"
                    },
                    "email": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john@example.com",
                        "nullable": true
                    },
                    "birth_date": {
                        "description": "Birth date",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "gender": {
                        "description": "Person's gender",
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE"
                        ],
                        "example": "MALE",
                        "nullable": true
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "Istanbul",
                        "nullable": true
                    },
                    "status": {
                        "description": "Person status",
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "address": {
                        "properties": {
                            "country_id": {
                                "description": "Country ID",
                                "type": "integer",
                                "example": 1
                            },
                            "province_id": {
                                "description": "Province ID",
                                "type": "integer",
                                "example": 34
                            },
                            "district_id": {
                                "description": "District ID",
                                "type": "integer",
                                "example": 1
                            },
                            "neighborhood": {
                                "description": "Neighborhood name",
                                "type": "string",
                                "example": "Caddebostan"
                            },
                            "street": {
                                "description": "Street name",
                                "type": "string",
                                "example": "Bağdat Caddesi"
                            },
                            "building_no": {
                                "description": "Building number",
                                "type": "string",
                                "example": "123"
                            },
                            "apartment_no": {
                                "description": "Apartment number",
                                "type": "string",
                                "example": "4"
                            },
                            "postal_code": {
                                "description": "Postal code",
                                "type": "string",
                                "example": "34728"
                            },
                            "address_type": {
                                "description": "Address type",
                                "type": "string",
                                "enum": [
                                    "home",
                                    "work",
                                    "other"
                                ],
                                "example": "home"
                            },
                            "is_default": {
                                "description": "Whether this is the default address",
                                "type": "boolean",
                                "default": false,
                                "example": true
                            },
                            "status": {
                                "description": "Address status",
                                "type": "string",
                                "default": "active",
                                "enum": [
                                    "active",
                                    "inactive"
                                ],
                                "example": "active"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UpdatePersonRequestSchema": {
                "properties": {
                    "name": {
                        "description": "Person's first name",
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "description": "Person's last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "tc_no": {
                        "description": "Turkish Citizenship Number (11 digits)",
                        "type": "string",
                        "example": "12345678901"
                    },
                    "phone": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "+905555555555"
                    },
                    "email": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john@example.com",
                        "nullable": true
                    },
                    "birth_date": {
                        "description": "Birth date",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "gender": {
                        "description": "Person's gender",
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE"
                        ],
                        "example": "MALE",
                        "nullable": true
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "Istanbul",
                        "nullable": true
                    },
                    "status": {
                        "description": "Person status",
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "address": {
                        "properties": {
                            "country_id": {
                                "description": "Country ID",
                                "type": "integer",
                                "example": 1
                            },
                            "province_id": {
                                "description": "Province ID",
                                "type": "integer",
                                "example": 34
                            },
                            "district_id": {
                                "description": "District ID",
                                "type": "integer",
                                "example": 1
                            },
                            "neighborhood": {
                                "description": "Neighborhood name",
                                "type": "string",
                                "example": "Caddebostan"
                            },
                            "street": {
                                "description": "Street name",
                                "type": "string",
                                "example": "Bağdat Caddesi"
                            },
                            "building_no": {
                                "description": "Building number",
                                "type": "string",
                                "example": "123"
                            },
                            "apartment_no": {
                                "description": "Apartment number",
                                "type": "string",
                                "example": "4"
                            },
                            "postal_code": {
                                "description": "Postal code",
                                "type": "string",
                                "example": "34728"
                            },
                            "address_type": {
                                "description": "Address type",
                                "type": "string",
                                "enum": [
                                    "home",
                                    "work",
                                    "other"
                                ],
                                "example": "home"
                            },
                            "is_default": {
                                "description": "Whether this is the default address",
                                "type": "boolean",
                                "default": false,
                                "example": true
                            },
                            "status": {
                                "description": "Address status",
                                "type": "string",
                                "default": "active",
                                "enum": [
                                    "active",
                                    "inactive"
                                ],
                                "example": "active"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UpdatePersonStatusRequestSchema": {
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "description": "Person status",
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "address": {
                        "properties": {
                            "country_id": {
                                "description": "Country ID",
                                "type": "integer",
                                "example": 1
                            },
                            "province_id": {
                                "description": "Province ID",
                                "type": "integer",
                                "example": 34
                            },
                            "district_id": {
                                "description": "District ID",
                                "type": "integer",
                                "example": 1
                            },
                            "neighborhood": {
                                "description": "Neighborhood name",
                                "type": "string",
                                "example": "Caddebostan"
                            },
                            "street": {
                                "description": "Street name",
                                "type": "string",
                                "example": "Bağdat Caddesi"
                            },
                            "building_no": {
                                "description": "Building number",
                                "type": "string",
                                "example": "123"
                            },
                            "apartment_no": {
                                "description": "Apartment number",
                                "type": "string",
                                "example": "4"
                            },
                            "postal_code": {
                                "description": "Postal code",
                                "type": "string",
                                "example": "34728"
                            },
                            "address_type": {
                                "description": "Address type",
                                "type": "string",
                                "enum": [
                                    "home",
                                    "work",
                                    "other"
                                ],
                                "example": "home"
                            },
                            "is_default": {
                                "description": "Whether this is the default address",
                                "type": "boolean",
                                "default": false,
                                "example": true
                            },
                            "status": {
                                "description": "Address status",
                                "type": "string",
                                "default": "active",
                                "enum": [
                                    "active",
                                    "inactive"
                                ],
                                "example": "active"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UploadProfilePhotoRequestSchema": {
                "required": [
                    "profile_photo"
                ],
                "properties": {
                    "profile_photo": {
                        "description": "Profile photo file (jpeg, png, jpg, gif)",
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "PersonResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John"
                    },
                    "surname": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "tc_no": {
                        "type": "string",
                        "example": "12345678901"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+905555555555"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@example.com",
                        "nullable": true
                    },
                    "birth_date": {
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "gender": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE"
                        ],
                        "example": "MALE",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "example": "Istanbul",
                        "nullable": true
                    },
                    "profile_photo_path": {
                        "type": "string",
                        "example": "profile-photos/abc123.jpg",
                        "nullable": true
                    },
                    "profile_photo_url": {
                        "type": "string",
                        "example": "http://example.com/storage/profile-photos/abc123.jpg",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PaymentPlanPaginationMeta": {
                "properties": {
                    "current_page": {
                        "type": "integer",
                        "example": 1
                    },
                    "from": {
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "type": "integer",
                        "example": 5
                    },
                    "path": {
                        "type": "string",
                        "example": "http://api.example.com/api/v1/payment-plans"
                    },
                    "per_page": {
                        "type": "integer",
                        "example": 15
                    },
                    "to": {
                        "type": "integer",
                        "example": 15
                    },
                    "total": {
                        "type": "integer",
                        "example": 75
                    }
                },
                "type": "object"
            },
            "PaymentPlanPaymentTypeResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "bank_name": {
                        "type": "string",
                        "example": "Example Bank",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "example": "Payment via credit card",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "PaymentPlanResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/PaymentPlanResourceSchema"
                    },
                    "message": {
                        "type": "string",
                        "example": "Payment plan created successfully"
                    }
                },
                "type": "object"
            },
            "PaymentPlansResponse": {
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentPlanResourceSchema"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaymentPlanPaginationMeta"
                    }
                },
                "type": "object"
            },
            "DeleteResponse": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Payment plan deleted successfully"
                    }
                },
                "type": "object"
            },
            "AccountTransaction": {
                "required": [
                    "id",
                    "guest_id",
                    "transaction_type",
                    "model_type",
                    "model_id",
                    "amount",
                    "movement_type"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "transaction_type": {
                        "type": "integer",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8
                        ],
                        "example": 1
                    },
                    "model_type": {
                        "type": "string",
                        "example": "App\\\\Modules\\\\Finance\\\\Models\\\\SeasonRegistrationProduct"
                    },
                    "model_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "movement_type": {
                        "type": "integer",
                        "enum": [
                            1,
                            -1
                        ],
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "example": "New registration fee",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "Currency": {
                "title": "Currency",
                "description": "Currency model",
                "properties": {
                    "id": {
                        "description": "Currency ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "code": {
                        "description": "Currency code (e.g. USD, EUR, TRY)",
                        "type": "string",
                        "maxLength": 3,
                        "example": "USD"
                    },
                    "name": {
                        "description": "Currency name",
                        "type": "string",
                        "example": "US Dollar"
                    },
                    "symbol": {
                        "description": "Currency symbol",
                        "type": "string",
                        "maxLength": 10,
                        "example": "$"
                    },
                    "decimal_places": {
                        "description": "Number of decimal places for formatting",
                        "type": "integer",
                        "example": 2
                    },
                    "is_default": {
                        "description": "Whether this is the default currency for the tenant",
                        "type": "boolean",
                        "example": false
                    },
                    "status": {
                        "description": "Currency status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "DepositDeduction": {
                "required": [
                    "id",
                    "season_registration_id",
                    "amount",
                    "reason"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "season_registration_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "reason": {
                        "type": "string",
                        "example": "Damaged furniture"
                    },
                    "description": {
                        "type": "string",
                        "example": "Broken chair in living room",
                        "nullable": true
                    },
                    "evidence_photo_path": {
                        "type": "string",
                        "example": "/storage/deductions/photo123.jpg",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "DiscountCategory": {
                "required": [
                    "id",
                    "tenant_id",
                    "code",
                    "name",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "code": {
                        "type": "string",
                        "example": "RENEWAL"
                    },
                    "name": {
                        "type": "string",
                        "example": "Renewal Discount"
                    },
                    "description": {
                        "type": "string",
                        "example": "Discount for returning guests",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    }
                },
                "type": "object"
            },
            "DiscountRule": {
                "required": [
                    "id",
                    "tenant_id",
                    "discount_category_id",
                    "start_date",
                    "end_date",
                    "discount_type",
                    "discount_value",
                    "priority",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "discount_category_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "nullable": true
                    },
                    "product_category_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1,
                        "nullable": true
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-01-01"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-12-31"
                    },
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage",
                            "fixed"
                        ],
                        "example": "percentage"
                    },
                    "discount_value": {
                        "type": "number",
                        "format": "float",
                        "example": 10.5
                    },
                    "min_price": {
                        "type": "number",
                        "format": "float",
                        "example": 100,
                        "nullable": true
                    },
                    "max_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000,
                        "nullable": true
                    },
                    "min_nights": {
                        "type": "integer",
                        "example": 3,
                        "nullable": true
                    },
                    "max_nights": {
                        "type": "integer",
                        "example": 14,
                        "nullable": true
                    },
                    "priority": {
                        "type": "integer",
                        "example": 1
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    }
                },
                "type": "object"
            },
            "ExchangeRate": {
                "title": "Exchange Rate",
                "description": "Exchange rate between two currencies",
                "properties": {
                    "id": {
                        "description": "Exchange rate ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "base_currency": {
                        "description": "Base currency",
                        "properties": {
                            "id": {
                                "description": "Currency ID",
                                "type": "integer",
                                "example": 1
                            },
                            "code": {
                                "description": "Currency code",
                                "type": "string",
                                "example": "USD"
                            },
                            "name": {
                                "description": "Currency name",
                                "type": "string",
                                "example": "US Dollar"
                            },
                            "symbol": {
                                "description": "Currency symbol",
                                "type": "string",
                                "example": "$"
                            }
                        },
                        "type": "object"
                    },
                    "target_currency": {
                        "description": "Target currency",
                        "properties": {
                            "id": {
                                "description": "Currency ID",
                                "type": "integer",
                                "example": 2
                            },
                            "code": {
                                "description": "Currency code",
                                "type": "string",
                                "example": "EUR"
                            },
                            "name": {
                                "description": "Currency name",
                                "type": "string",
                                "example": "Euro"
                            },
                            "symbol": {
                                "description": "Currency symbol",
                                "type": "string",
                                "example": "€"
                            }
                        },
                        "type": "object"
                    },
                    "rate": {
                        "description": "Exchange rate value",
                        "type": "number",
                        "format": "float",
                        "example": 1.2345
                    },
                    "effective_date": {
                        "description": "Date when rate is effective",
                        "type": "string",
                        "format": "date",
                        "example": "2025-03-24"
                    },
                    "source": {
                        "description": "Source of exchange rate",
                        "type": "string",
                        "enum": [
                            "manual",
                            "api",
                            "system"
                        ],
                        "example": "api"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "Invoice": {
                "required": [
                    "id",
                    "invoice_number",
                    "invoice_date",
                    "season_registration_id",
                    "invoice_title_id",
                    "total_amount",
                    "tax_amount",
                    "net_amount",
                    "currency",
                    "status",
                    "integration_status"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "invoice_number": {
                        "type": "string",
                        "example": "INV-2025-00001"
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-03-25"
                    },
                    "season_registration_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "invoice_title_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "total_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1150
                    },
                    "tax_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 150
                    },
                    "net_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "currency": {
                        "type": "string",
                        "example": "TRY"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "draft",
                            "issued",
                            "canceled"
                        ],
                        "example": "draft"
                    },
                    "integration_status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "sent",
                            "error"
                        ],
                        "example": "pending"
                    },
                    "integration_id": {
                        "type": "string",
                        "example": "EXT-12345",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "example": "Monthly accommodation invoice",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    }
                },
                "type": "object"
            },
            "InvoiceDetail": {
                "required": [
                    "id",
                    "invoice_id",
                    "season_registration_product_id",
                    "description",
                    "quantity",
                    "unit_price",
                    "total_price"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "invoice_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "season_registration_product_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "example": "Monthly accommodation fee"
                    },
                    "quantity": {
                        "type": "number",
                        "format": "float",
                        "example": 1
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "total_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    }
                },
                "type": "object"
            },
            "InvoiceTaxDetail": {
                "required": [
                    "id",
                    "invoice_detail_id",
                    "tax_type_id",
                    "tax_rate",
                    "tax_amount"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "invoice_detail_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "tax_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "tax_rate": {
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "tax_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 180
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-25 12:00:00"
                    }
                },
                "type": "object"
            },
            "Payment": {
                "required": [
                    "id",
                    "payment_plan_id",
                    "payment_type_id",
                    "amount",
                    "payment_date",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "payment_plan_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "payment_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-15 14:30:00"
                    },
                    "approval_code": {
                        "type": "string",
                        "example": "TXN123456",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "completed",
                            "cancelled",
                            "refunded"
                        ],
                        "example": "completed"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Payment processed by Jane Doe",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "PaymentPlan": {
                "required": [
                    "id",
                    "season_registration_product_id",
                    "planned_payment_type_id",
                    "planned_amount",
                    "planned_date",
                    "status"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "season_registration_product_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "planned_payment_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "planned_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "planned_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-04-15"
                    },
                    "is_deposit": {
                        "type": "boolean",
                        "example": false
                    },
                    "deposit_refund_status": {
                        "type": "string",
                        "enum": [
                            "not_refunded",
                            "partially_refunded",
                            "fully_refunded"
                        ],
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "planned",
                            "paid",
                            "partial_paid",
                            "overdue"
                        ],
                        "example": "planned"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Pre-payment for accommodation",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "SeasonRegistrationProductDiscount": {
                "required": [
                    "id",
                    "tenant_id",
                    "season_registration_product_id",
                    "discount_rule_id",
                    "discount_type",
                    "discount_amount"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "season_registration_product_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "discount_rule_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "discount_type": {
                        "type": "string",
                        "enum": [
                            "percentage",
                            "fixed"
                        ],
                        "example": "percentage"
                    },
                    "discount_rate": {
                        "type": "number",
                        "format": "float",
                        "example": 10,
                        "nullable": true
                    },
                    "discount_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "notes": {
                        "type": "string",
                        "example": "Special discount approved by manager",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 12:00:00"
                    }
                },
                "type": "object"
            },
            "AddTaxToPriceRequestSchema": {
                "title": "Add Tax To Price Request",
                "description": "Schema for adding a tax to an existing price",
                "required": [
                    "tax_type_id"
                ],
                "properties": {
                    "tax_type_id": {
                        "description": "ID of the tax type to add to the price",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "CreateInvoiceDetailRequest": {
                "required": [
                    "season_registration_product_id"
                ],
                "properties": {
                    "season_registration_product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "example": "Monthly accommodation fee"
                    },
                    "quantity": {
                        "type": "number",
                        "format": "float",
                        "example": 1
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "tax_details": {
                        "type": "array",
                        "items": {
                            "required": [
                                "tax_type_id",
                                "tax_rate",
                                "tax_amount"
                            ],
                            "properties": {
                                "tax_type_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "tax_rate": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 18
                                },
                                "tax_amount": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 180
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "ModuleFinanceCreateInvoiceRequest": {
                "title": "Create Invoice Request",
                "description": "Request body for creating an invoice",
                "required": [
                    "season_registration_id",
                    "invoice_title_id"
                ],
                "properties": {
                    "season_registration_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_title_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_number": {
                        "type": "string",
                        "example": "INV-2023-0001"
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-07-01"
                    },
                    "currency": {
                        "type": "string",
                        "example": "USD"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Monthly invoice"
                    },
                    "details": {
                        "type": "array",
                        "items": {
                            "required": [
                                "season_registration_product_id"
                            ],
                            "properties": {
                                "season_registration_product_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "description": {
                                    "type": "string",
                                    "example": "Monthly accommodation fee"
                                },
                                "quantity": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1
                                },
                                "unit_price": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 1000
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentPlanCreateRequest": {
                "required": [
                    "season_registration_product_id",
                    "planned_payment_type_id",
                    "planned_amount",
                    "planned_date",
                    "status"
                ],
                "properties": {
                    "season_registration_product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "planned_payment_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "planned_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "planned_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-04-15"
                    },
                    "is_deposit": {
                        "type": "boolean",
                        "example": false
                    },
                    "deposit_refund_status": {
                        "type": "string",
                        "enum": [
                            "not_refunded",
                            "partially_refunded",
                            "fully_refunded"
                        ],
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "planned",
                            "paid",
                            "partial_paid",
                            "overdue"
                        ],
                        "example": "planned"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Pre-payment for accommodation"
                    }
                },
                "type": "object"
            },
            "CreatePaymentRequest": {
                "required": [
                    "payment_plan_id",
                    "payment_type_id",
                    "amount",
                    "payment_date"
                ],
                "properties": {
                    "payment_plan_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "payment_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-15 14:30:00"
                    },
                    "approval_code": {
                        "type": "string",
                        "example": "TXN123456",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "example": "Payment processed by Jane Doe",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreatePriceRequestSchema": {
                "title": "Create Price Request",
                "description": "Schema for creating a new price",
                "required": [
                    "apart_id",
                    "season_code",
                    "product_id",
                    "price",
                    "currency",
                    "start_date",
                    "end_date"
                ],
                "properties": {
                    "apart_id": {
                        "description": "ID of the apartment",
                        "type": "integer",
                        "example": 1
                    },
                    "season_code": {
                        "description": "Season code",
                        "type": "string",
                        "example": "SUMMER2023"
                    },
                    "product_id": {
                        "description": "ID of the product",
                        "type": "integer",
                        "example": 1
                    },
                    "price": {
                        "description": "Base price amount",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "currency": {
                        "description": "Currency code (3 characters)",
                        "type": "string",
                        "example": "TRY"
                    },
                    "start_date": {
                        "description": "Price validity start date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-06-01"
                    },
                    "end_date": {
                        "description": "Price validity end date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-09-30"
                    },
                    "tax_type_ids": {
                        "description": "List of tax type IDs to apply to the price",
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                },
                "type": "object"
            },
            "CreateProductCategoryRequestSchema": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Category name, unique per tenant",
                        "type": "string",
                        "example": "Accommodation"
                    },
                    "description": {
                        "description": "Category description",
                        "type": "string",
                        "example": "Main accommodation types"
                    },
                    "status": {
                        "description": "Category status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "CreateProductRequestSchema": {
                "required": [
                    "name",
                    "category_id"
                ],
                "properties": {
                    "name": {
                        "description": "Product name, unique per tenant",
                        "type": "string",
                        "example": "Single Room Accommodation"
                    },
                    "category_id": {
                        "description": "ID of the product category",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string",
                        "example": "Standard accommodation for one person"
                    },
                    "status": {
                        "description": "Product status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "CreateSeasonRequestSchema": {
                "required": [
                    "name",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Season name, unique per tenant",
                        "type": "string",
                        "example": "2024-2025"
                    },
                    "code": {
                        "description": "Season code, unique per tenant, max 10 chars",
                        "type": "string",
                        "example": "2425"
                    },
                    "status": {
                        "description": "Season status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateInvoiceDetailRequest": {
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "Updated accommodation fee"
                    },
                    "quantity": {
                        "type": "number",
                        "format": "float",
                        "example": 2
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "tax_details": {
                        "type": "array",
                        "items": {
                            "required": [
                                "tax_type_id",
                                "tax_rate",
                                "tax_amount"
                            ],
                            "properties": {
                                "tax_type_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "tax_rate": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 18
                                },
                                "tax_amount": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 360
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "ModuleFinanceUpdateInvoiceRequest": {
                "properties": {
                    "invoice_title_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-03-25"
                    },
                    "currency": {
                        "type": "string",
                        "example": "TRY"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Updated notes for monthly invoice"
                    }
                },
                "type": "object"
            },
            "PaymentPlanUpdateRequest": {
                "properties": {
                    "planned_payment_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "planned_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "planned_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-04-15"
                    },
                    "is_deposit": {
                        "type": "boolean",
                        "example": false
                    },
                    "deposit_refund_status": {
                        "type": "string",
                        "enum": [
                            "not_refunded",
                            "partially_refunded",
                            "fully_refunded"
                        ],
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "planned",
                            "paid",
                            "partial_paid",
                            "overdue"
                        ],
                        "example": "planned"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Pre-payment for accommodation"
                    }
                },
                "type": "object"
            },
            "PaymentPlanUpdateStatusRequest": {
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "planned",
                            "paid",
                            "partial_paid",
                            "overdue"
                        ],
                        "example": "paid"
                    }
                },
                "type": "object"
            },
            "UpdatePaymentRequest": {
                "properties": {
                    "payment_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-15 14:30:00"
                    },
                    "approval_code": {
                        "type": "string",
                        "example": "TXN123456",
                        "nullable": true
                    },
                    "notes": {
                        "type": "string",
                        "example": "Payment processed by Jane Doe",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdatePriceRequestSchema": {
                "title": "Update Price Request",
                "description": "Schema for updating an existing price",
                "properties": {
                    "apart_id": {
                        "description": "ID of the apartment",
                        "type": "integer",
                        "example": 1
                    },
                    "season_code": {
                        "description": "Season code",
                        "type": "string",
                        "example": "SUMMER2023"
                    },
                    "product_id": {
                        "description": "ID of the product",
                        "type": "integer",
                        "example": 1
                    },
                    "price": {
                        "description": "Base price amount",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "currency": {
                        "description": "Currency code (3 characters)",
                        "type": "string",
                        "example": "TRY"
                    },
                    "start_date": {
                        "description": "Price validity start date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-06-01"
                    },
                    "end_date": {
                        "description": "Price validity end date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-09-30"
                    }
                },
                "type": "object"
            },
            "UpdateProductCategoryRequestSchema": {
                "properties": {
                    "name": {
                        "description": "Category name, unique per tenant",
                        "type": "string",
                        "example": "Accommodation"
                    },
                    "description": {
                        "description": "Category description",
                        "type": "string",
                        "example": "Main accommodation types"
                    },
                    "status": {
                        "description": "Category status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateProductCategoryStatusRequestSchema": {
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "description": "Category status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateProductRequestSchema": {
                "properties": {
                    "name": {
                        "description": "Product name, unique per tenant",
                        "type": "string",
                        "example": "Single Room Accommodation (Updated)"
                    },
                    "category_id": {
                        "description": "ID of the product category",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Product description",
                        "type": "string",
                        "example": "Updated description for standard accommodation"
                    },
                    "status": {
                        "description": "Product status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateProductStatusRequestSchema": {
                "required": [
                    "status"
                ],
                "properties": {
                    "status": {
                        "description": "Product status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "inactive"
                    }
                },
                "type": "object"
            },
            "UpdateSeasonRequestSchema": {
                "properties": {
                    "name": {
                        "description": "Season name, unique per tenant",
                        "type": "string",
                        "example": "2024-2025"
                    },
                    "code": {
                        "description": "Season code, unique per tenant, max 10 chars",
                        "type": "string",
                        "example": "2425"
                    },
                    "status": {
                        "description": "Season status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "AccountTransactionResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "transaction_type": {
                        "type": "integer",
                        "example": 1
                    },
                    "transaction_type_label": {
                        "type": "string",
                        "example": "New Registration"
                    },
                    "model_type": {
                        "type": "string",
                        "example": "App\\\\Modules\\\\Finance\\\\Models\\\\SeasonRegistrationProduct"
                    },
                    "model_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "movement_type": {
                        "type": "integer",
                        "example": 1
                    },
                    "movement_type_label": {
                        "type": "string",
                        "example": "Debit"
                    },
                    "effective_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "description": {
                        "type": "string",
                        "example": "New registration fee"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "AccountTransactionSummaryResource": {
                "properties": {
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "balance": {
                        "type": "number",
                        "format": "float",
                        "example": 500.5
                    },
                    "transactions_count": {
                        "type": "integer",
                        "example": 15
                    },
                    "total_charged": {
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "total_paid": {
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "type_breakdown": {
                        "properties": {
                            "1": {
                                "description": "Registration",
                                "type": "number",
                                "example": 1000
                            },
                            "5": {
                                "description": "Payment",
                                "type": "number",
                                "example": 500
                            }
                        },
                        "type": "object"
                    },
                    "last_transaction_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "InvoiceTitleResource": {
                "title": "Invoice Title Resource",
                "description": "Invoice Title resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "season_registration_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "title_type": {
                        "type": "string",
                        "enum": [
                            "corporate",
                            "individual"
                        ],
                        "example": "corporate"
                    },
                    "company_name": {
                        "type": "string",
                        "example": "Acme Corp",
                        "nullable": true
                    },
                    "tax_office": {
                        "type": "string",
                        "example": "Boston",
                        "nullable": true
                    },
                    "tax_number": {
                        "type": "string",
                        "example": "1234567890",
                        "nullable": true
                    },
                    "identity_number": {
                        "type": "string",
                        "example": "12345678901",
                        "nullable": true
                    },
                    "first_name": {
                        "type": "string",
                        "example": "John",
                        "nullable": true
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Doe",
                        "nullable": true
                    },
                    "address": {
                        "type": "string",
                        "example": "123 Main St, Boston, MA",
                        "nullable": true
                    },
                    "phone": {
                        "type": "string",
                        "example": "+1 555 123 4567"
                    },
                    "email": {
                        "type": "string",
                        "example": "john@example.com",
                        "nullable": true
                    },
                    "is_default": {
                        "type": "boolean",
                        "example": true
                    },
                    "structured_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "formatted_address": {
                        "type": "string",
                        "example": "123 Main St, Atasehir, Istanbul, 34758, Turkey",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PaymentPlanResourceSchema": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "season_registration_product_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "planned_payment_type_id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "planned_payment_type": {
                        "$ref": "#/components/schemas/PaymentPlanPaymentTypeResource"
                    },
                    "planned_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "planned_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-04-15"
                    },
                    "is_deposit": {
                        "type": "boolean",
                        "example": false
                    },
                    "deposit_refund_status": {
                        "type": "string",
                        "enum": [
                            "not_refunded",
                            "partially_refunded",
                            "fully_refunded"
                        ],
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "planned",
                            "paid",
                            "partial_paid",
                            "overdue"
                        ],
                        "example": "planned"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Pre-payment for accommodation",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "PaymentResourceSchema": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_plan_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "payment_type": {
                        "$ref": "#/components/schemas/PaymentPaymentTypeResource"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "payment_date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-04-15 14:30:00"
                    },
                    "approval_code": {
                        "type": "string",
                        "example": "TXN123456",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "completed",
                            "cancelled",
                            "refunded"
                        ],
                        "example": "completed"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Payment processed by Jane Doe",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-03-24 12:00:00"
                    }
                },
                "type": "object"
            },
            "PaymentPaymentTypeResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "bank_name": {
                        "type": "string",
                        "example": "Example Bank",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "example": "Payment via credit card",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "PaymentPaginationMeta": {
                "properties": {
                    "current_page": {
                        "type": "integer",
                        "example": 1
                    },
                    "from": {
                        "type": "integer",
                        "example": 1
                    },
                    "last_page": {
                        "type": "integer",
                        "example": 3
                    },
                    "path": {
                        "type": "string",
                        "example": "http://example.com/api/payments"
                    },
                    "per_page": {
                        "type": "integer",
                        "example": 15
                    },
                    "to": {
                        "type": "integer",
                        "example": 15
                    },
                    "total": {
                        "type": "integer",
                        "example": 45
                    }
                },
                "type": "object"
            },
            "PaymentCollection": {
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentResourceSchema"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaymentPaginationMeta"
                    }
                },
                "type": "object"
            },
            "FinancePaymentTypeCategoryResource": {
                "title": "Payment Type Category Resource",
                "description": "Payment type category resource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "description": {
                        "type": "string",
                        "example": "Credit and debit card payments"
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FinancePaymentTypeResource": {
                "title": "Payment Type Resource",
                "description": "Payment type resource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category": {
                        "$ref": "#/components/schemas/FinancePaymentTypeCategoryResource"
                    },
                    "name": {
                        "type": "string",
                        "example": "Ziraat Bank Transfer"
                    },
                    "bank_name": {
                        "type": "string",
                        "example": "Ziraat Bank",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "example": "Transfer from Ziraat Bank accounts",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FinancePriceResource": {
                "title": "Finance Price Resource",
                "description": "Price resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Deluxe Apart"
                            }
                        },
                        "type": "object"
                    },
                    "season_code": {
                        "type": "string",
                        "example": "SUMMER2023"
                    },
                    "season": {
                        "properties": {
                            "code": {
                                "type": "string",
                                "example": "SUMMER2023"
                            },
                            "name": {
                                "type": "string",
                                "example": "Yaz 2023"
                            }
                        },
                        "type": "object"
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Konaklama"
                            },
                            "category_id": {
                                "type": "integer",
                                "example": 1
                            },
                            "category": {
                                "properties": {
                                    "id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Temel Hizmetler"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 1180.5
                    },
                    "currency": {
                        "type": "string",
                        "example": "TRY"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-06-01"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-09-30"
                    },
                    "taxes": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "tax_type_id": {
                                    "type": "integer",
                                    "example": 1
                                },
                                "tax_type": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "KDV"
                                        },
                                        "tax_code": {
                                            "type": "string",
                                            "example": "VAT"
                                        },
                                        "percentage": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 18
                                        },
                                        "priority": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                },
                                "tax_amount": {
                                    "type": "number",
                                    "format": "float",
                                    "example": 180
                                }
                            },
                            "type": "object"
                        }
                    },
                    "net_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "tax_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 180
                    },
                    "gross_price": {
                        "type": "number",
                        "format": "float",
                        "example": 1180.5
                    },
                    "created_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    }
                },
                "type": "object"
            },
            "FinancePriceTaxResource": {
                "title": "Finance Price Tax Resource",
                "description": "Price tax resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "price_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tax_type_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tax_type": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "KDV"
                            },
                            "code": {
                                "type": "string",
                                "example": "VAT"
                            },
                            "rate": {
                                "type": "number",
                                "format": "float",
                                "example": 18
                            }
                        },
                        "type": "object"
                    },
                    "tax_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 180
                    },
                    "created_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    }
                },
                "type": "object"
            },
            "FinanceProductCategoryResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Accommodation"
                    },
                    "description": {
                        "type": "string",
                        "example": "Main accommodation types",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "products_count": {
                        "type": "integer",
                        "example": 5
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FinanceProductResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "category": {
                        "$ref": "#/components/schemas/FinanceProductCategoryResource"
                    },
                    "name": {
                        "type": "string",
                        "example": "Single Room Accommodation"
                    },
                    "description": {
                        "type": "string",
                        "example": "Standard accommodation for one person",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ReportTemplate": {
                "properties": {
                    "id": {
                        "description": "Resource for ReportTemplate model",
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Revenue by Season"
                    },
                    "type": {
                        "type": "string",
                        "example": "revenue"
                    },
                    "config": {
                        "type": "object"
                    },
                    "is_system": {
                        "type": "boolean",
                        "example": true
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_by": {
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "type": "integer",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T00:00:00.000000Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "SavedReport": {
                "properties": {
                    "id": {
                        "description": "Resource for SavedReport model",
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "report_template_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "My Revenue Report"
                    },
                    "parameters": {
                        "type": "object"
                    },
                    "results": {
                        "type": "object"
                    },
                    "created_by": {
                        "type": "integer",
                        "example": 1
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T00:00:00.000000Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-24T00:00:00.000000Z"
                    },
                    "report_template": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Revenue by Season"
                            },
                            "type": {
                                "type": "string",
                                "example": "revenue"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "FinanceSeasonRegistrationProductResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "season_registration_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "price_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 2
                    },
                    "unit_price": {
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "total_price": {
                        "type": "number",
                        "format": "float",
                        "example": 201
                    },
                    "notes": {
                        "type": "string",
                        "example": "Optional student discount applied",
                        "nullable": true
                    },
                    "registration": {
                        "$ref": "#/components/schemas/FinanceSeasonRegistrationResource"
                    },
                    "product": {
                        "$ref": "#/components/schemas/FinanceProductResource"
                    },
                    "price": {
                        "$ref": "#/components/schemas/FinancePriceResource"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00.000000Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "FinanceSeasonRegistrationResource": {
                "title": "Season Registration Resource",
                "description": "Season Registration resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "bed_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "season_code": {
                        "type": "string",
                        "example": "2425"
                    },
                    "check_in_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-09-01"
                    },
                    "check_out_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-06-30"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "cancelled",
                            "completed"
                        ],
                        "example": "active"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Special dietary requirements",
                        "nullable": true
                    },
                    "deposit_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 300,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "guest": {
                        "$ref": "#/components/schemas/GuestResource"
                    },
                    "bed": {
                        "$ref": "#/components/schemas/BedResource"
                    },
                    "season": {
                        "$ref": "#/components/schemas/FinanceSeasonResource"
                    }
                },
                "type": "object"
            },
            "FinanceSeasonResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "2024-2025"
                    },
                    "code": {
                        "type": "string",
                        "example": "2425"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FinanceTaxTypeResource": {
                "title": "Finance Tax Type Resource",
                "description": "Tax type resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "KDV"
                    },
                    "tax_code": {
                        "type": "string",
                        "example": "VAT"
                    },
                    "percentage": {
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "priority": {
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "type": "string",
                        "example": "Katma Değer Vergisi"
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "datetime",
                        "example": "2023-06-01 12:00:00"
                    }
                },
                "type": "object"
            },
            "CreateGuardianRequest": {
                "title": "Create Guardian Request",
                "description": "Request body for creating a new guardian",
                "required": [
                    "person_id",
                    "relationship",
                    "valid_from"
                ],
                "properties": {
                    "person_id": {
                        "description": "ID of the person record for this guardian",
                        "type": "integer",
                        "example": 1
                    },
                    "relationship": {
                        "description": "Relationship to the guest",
                        "type": "string",
                        "example": "PARENT"
                    },
                    "is_self": {
                        "description": "Whether this guardian is the guest themselves",
                        "type": "boolean",
                        "example": false
                    },
                    "is_emergency_contact": {
                        "description": "Whether this guardian is an emergency contact",
                        "type": "boolean",
                        "example": true
                    },
                    "valid_from": {
                        "description": "Date when guardianship becomes valid",
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "notes": {
                        "description": "Additional notes about the guardian",
                        "type": "string",
                        "example": "Primary caretaker"
                    }
                },
                "type": "object"
            },
            "CreateGuestRequest": {
                "title": "Create Guest Request",
                "description": "Request body for creating a new guest",
                "required": [
                    "person_id",
                    "guest_type"
                ],
                "properties": {
                    "person_id": {
                        "description": "ID of the person record for this guest",
                        "type": "integer",
                        "example": 1
                    },
                    "guest_type": {
                        "description": "Type of guest",
                        "type": "string",
                        "enum": [
                            "STUDENT",
                            "EMPLOYEE",
                            "OTHER"
                        ],
                        "example": "STUDENT"
                    },
                    "profession_department": {
                        "description": "Guest's profession or department",
                        "type": "string",
                        "example": "Computer Science"
                    },
                    "emergency_contact": {
                        "description": "Emergency contact information",
                        "type": "string",
                        "example": "+905551234567"
                    },
                    "notes": {
                        "description": "Additional notes about the guest",
                        "type": "string",
                        "example": "Has allergies to peanuts"
                    }
                },
                "type": "object"
            },
            "UpdateGuardianRequest": {
                "title": "Update Guardian Request",
                "description": "Request body for updating an existing guardian",
                "required": [
                    "change_reason"
                ],
                "properties": {
                    "relationship": {
                        "description": "Relationship to the guest",
                        "type": "string",
                        "example": "PARENT",
                        "nullable": true
                    },
                    "is_emergency_contact": {
                        "description": "Whether this guardian is an emergency contact",
                        "type": "boolean",
                        "example": true,
                        "nullable": true
                    },
                    "notes": {
                        "description": "Additional notes about the guardian",
                        "type": "string",
                        "example": "Primary caretaker",
                        "nullable": true
                    },
                    "change_reason": {
                        "description": "Reason for updating the guardian",
                        "type": "string",
                        "example": "Updated contact information"
                    }
                },
                "type": "object"
            },
            "UpdateGuestRequest": {
                "title": "Update Guest Request",
                "description": "Request body for updating an existing guest",
                "properties": {
                    "guest_type": {
                        "description": "Type of guest",
                        "type": "string",
                        "enum": [
                            "STUDENT",
                            "EMPLOYEE",
                            "OTHER"
                        ],
                        "example": "STUDENT",
                        "nullable": true
                    },
                    "profession_department": {
                        "description": "Guest's profession or department",
                        "type": "string",
                        "example": "Computer Science",
                        "nullable": true
                    },
                    "emergency_contact": {
                        "description": "Emergency contact information",
                        "type": "string",
                        "example": "+905551234567",
                        "nullable": true
                    },
                    "notes": {
                        "description": "Additional notes about the guest",
                        "type": "string",
                        "example": "Has allergies to peanuts",
                        "nullable": true
                    },
                    "status": {
                        "description": "Guest's status",
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "INACTIVE",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "AccessLogResource": {
                "title": "Access Log Resource",
                "description": "Access log resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "action_type": {
                        "type": "string",
                        "enum": [
                            "CHECK_IN",
                            "CHECK_OUT"
                        ],
                        "example": "CHECK_IN"
                    },
                    "location": {
                        "type": "string",
                        "example": "Main Entrance",
                        "nullable": true
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 10:00:00"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Guest arrived for orientation",
                        "nullable": true
                    },
                    "person": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "John Doe"
                            },
                            "tc_no": {
                                "type": "string",
                                "example": "12345678901"
                            },
                            "phone": {
                                "type": "string",
                                "example": "5551234567"
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "john@example.com"
                            }
                        },
                        "type": "object"
                    },
                    "guest": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "guest_type": {
                                "type": "string",
                                "example": "STUDENT"
                            },
                            "status": {
                                "type": "string",
                                "example": "ACTIVE"
                            }
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "created_by": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                            },
                            "name": {
                                "type": "string",
                                "example": "Admin User"
                            }
                        },
                        "type": "object",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-03-23 10:00:00"
                    }
                },
                "type": "object"
            },
            "DocumentResource": {
                "title": "Document Resource",
                "description": "Document resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "owner_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "document_type": {
                        "$ref": "#/components/schemas/DocumentTypeResource"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "UPLOADED",
                            "SYSTEM_GENERATED"
                        ],
                        "example": "UPLOADED"
                    },
                    "document_name": {
                        "type": "string",
                        "example": "Passport"
                    },
                    "file_path": {
                        "type": "string",
                        "example": "documents/1/passport_123456.pdf"
                    },
                    "upload_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "valid_until": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-01-01"
                    },
                    "metadata": {
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "verified",
                            "expired",
                            "invalid"
                        ],
                        "example": "active"
                    },
                    "version": {
                        "type": "string",
                        "example": "1.0"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "DocumentTypeResource": {
                "title": "Document Type Resource",
                "description": "Document type resource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Passport"
                    },
                    "description": {
                        "type": "string",
                        "example": "Official passport document"
                    },
                    "template_path": {
                        "type": "string",
                        "example": "templates/passport.blade.php"
                    },
                    "required_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "name",
                            "passport_number",
                            "issue_date"
                        ]
                    },
                    "is_system": {
                        "type": "boolean",
                        "example": true
                    },
                    "validity_period": {
                        "type": "integer",
                        "example": 365
                    },
                    "status": {
                        "type": "string",
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00.000000Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T00:00:00.000000Z"
                    }
                },
                "type": "object"
            },
            "GuardianHistoryResource": {
                "title": "Guardian History Resource",
                "description": "Guardian history resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guardian_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "valid_from": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "valid_to": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-06-01"
                    },
                    "change_reason": {
                        "type": "string",
                        "example": "Guardian information updated"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "GuardianResource": {
                "title": "Guardian Resource",
                "description": "Guardian resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "person_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "relationship": {
                        "type": "string",
                        "example": "PARENT"
                    },
                    "is_self": {
                        "type": "boolean",
                        "example": false
                    },
                    "is_emergency_contact": {
                        "type": "boolean",
                        "example": true
                    },
                    "valid_from": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Primary caretaker"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "person": {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 2
                            },
                            "name": {
                                "type": "string",
                                "example": "Jane Doe"
                            },
                            "tc_no": {
                                "type": "string",
                                "example": "98765432109"
                            },
                            "phone": {
                                "type": "string",
                                "example": "+905559876543"
                            },
                            "email": {
                                "type": "string",
                                "format": "email",
                                "example": "jane@example.com"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GuestResource": {
                "title": "Guest Resource",
                "description": "Guest resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "person_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "guest_type": {
                        "type": "string",
                        "enum": [
                            "STUDENT",
                            "EMPLOYEE",
                            "OTHER"
                        ],
                        "example": "STUDENT"
                    },
                    "profession_department": {
                        "type": "string",
                        "example": "Computer Science"
                    },
                    "emergency_contact": {
                        "type": "string",
                        "example": "+905551234567"
                    },
                    "notes": {
                        "type": "string",
                        "example": "Has allergies to peanuts"
                    },
                    "last_access_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "SUSPENDED"
                        ],
                        "example": "ACTIVE"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "person": {
                        "$ref": "#/components/schemas/PersonResource"
                    },
                    "guardians": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GuardianResource"
                        }
                    },
                    "documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DocumentResource"
                        }
                    },
                    "structured_address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddressResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "formatted_address": {
                        "type": "string",
                        "example": "123 Main St, Atasehir, Istanbul, 34758, Turkey",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateBedRequest": {
                "title": "Create Bed Request",
                "description": "Request body for creating a new bed",
                "required": [
                    "room_id",
                    "bed_number",
                    "bed_type",
                    "status"
                ],
                "properties": {
                    "room_id": {
                        "description": "ID of the room this bed belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "bed_number": {
                        "description": "Bed number (must be unique within the room)",
                        "type": "string",
                        "example": "A1"
                    },
                    "bed_type": {
                        "description": "Type of bed",
                        "type": "string",
                        "enum": [
                            "SINGLE",
                            "DOUBLE",
                            "BUNK"
                        ],
                        "example": "SINGLE"
                    },
                    "status": {
                        "description": "Bed status",
                        "type": "string",
                        "enum": [
                            "available",
                            "occupied",
                            "maintenance",
                            "reserved"
                        ],
                        "example": "available"
                    },
                    "guest_id": {
                        "description": "ID of the guest assigned to this bed (required if status is 'occupied')",
                        "type": "integer",
                        "example": null,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateFeatureRequest": {
                "title": "Create Feature Request",
                "description": "Request body for creating a new room feature",
                "required": [
                    "name",
                    "code",
                    "type",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Feature name",
                        "type": "string",
                        "example": "Wi-Fi"
                    },
                    "code": {
                        "description": "Unique feature code",
                        "type": "string",
                        "example": "WIFI"
                    },
                    "type": {
                        "description": "Feature type (ROOM, BED, APART, or MIXED for multiple types)",
                        "type": "string",
                        "enum": [
                            "ROOM",
                            "BED",
                            "APART",
                            "MIXED"
                        ],
                        "example": "ROOM"
                    },
                    "status": {
                        "description": "Feature status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "CreateInventoryRequest": {
                "title": "Create Inventory Request",
                "description": "Request body for creating a new inventory item. Note: Inventory items cannot be assigned during creation. Use dedicated assignment endpoints after creation.",
                "required": [
                    "item_type",
                    "status",
                    "tracking_number",
                    "brand",
                    "model",
                    "purchase_date",
                    "warranty_end"
                ],
                "properties": {
                    "item_type": {
                        "description": "Type of inventory item",
                        "type": "string",
                        "enum": [
                            "furniture",
                            "appliance",
                            "linen",
                            "electronic",
                            "kitchenware",
                            "decoration"
                        ],
                        "example": "furniture"
                    },
                    "status": {
                        "description": "Item status",
                        "type": "string",
                        "enum": [
                            "in_use",
                            "in_storage",
                            "maintenance",
                            "disposed"
                        ],
                        "example": "in_use"
                    },
                    "tracking_number": {
                        "description": "Unique tracking number for the item",
                        "type": "string",
                        "example": "FRN-2024-001"
                    },
                    "brand": {
                        "description": "Item brand",
                        "type": "string",
                        "example": "Modern Furniture"
                    },
                    "model": {
                        "description": "Item model",
                        "type": "string",
                        "example": "Office Chair"
                    },
                    "purchase_date": {
                        "description": "Date when the item was purchased",
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "warranty_end": {
                        "description": "Date when the warranty expires",
                        "type": "string",
                        "format": "date",
                        "example": "2027-03-01"
                    }
                },
                "type": "object"
            },
            "CreateRoomRequest": {
                "title": "Create Room Request",
                "description": "Request body for creating a new room",
                "required": [
                    "apart_id",
                    "room_number",
                    "floor",
                    "capacity",
                    "status"
                ],
                "properties": {
                    "apart_id": {
                        "description": "ID of the apart this room belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "room_number": {
                        "description": "Room number",
                        "type": "string",
                        "maxLength": 50,
                        "example": "101"
                    },
                    "floor": {
                        "description": "Floor number",
                        "type": "integer",
                        "example": 1
                    },
                    "capacity": {
                        "description": "Room capacity",
                        "type": "integer",
                        "example": 2
                    },
                    "room_type": {
                        "description": "Room type",
                        "type": "string",
                        "enum": [
                            "STANDARD",
                            "SUITE",
                            "DELUXE"
                        ],
                        "example": "STANDARD"
                    },
                    "status": {
                        "description": "Room status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "maintenance"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateBedRequest": {
                "title": "Update Bed Request",
                "description": "Request body for updating an existing bed",
                "properties": {
                    "bed_number": {
                        "description": "Bed number (must be unique within the room)",
                        "type": "string",
                        "example": "A2",
                        "nullable": true
                    },
                    "bed_type": {
                        "description": "Type of bed",
                        "type": "string",
                        "enum": [
                            "SINGLE",
                            "DOUBLE",
                            "BUNK"
                        ],
                        "example": "DOUBLE",
                        "nullable": true
                    },
                    "status": {
                        "description": "Bed status",
                        "type": "string",
                        "enum": [
                            "available",
                            "occupied",
                            "maintenance",
                            "reserved"
                        ],
                        "example": "maintenance",
                        "nullable": true
                    },
                    "guest_id": {
                        "description": "ID of the guest assigned to this bed (required if status is 'occupied')",
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateFeatureRequest": {
                "title": "Update Feature Request",
                "description": "Request body for updating an existing room feature",
                "properties": {
                    "name": {
                        "description": "Feature name",
                        "type": "string",
                        "example": "High-Speed Wi-Fi",
                        "nullable": true
                    },
                    "code": {
                        "description": "Unique feature code",
                        "type": "string",
                        "example": "HSWIFI",
                        "nullable": true
                    },
                    "type": {
                        "description": "Feature type (ROOM, BED, APART, or MIXED for multiple types)",
                        "type": "string",
                        "enum": [
                            "ROOM",
                            "BED",
                            "APART",
                            "MIXED"
                        ],
                        "example": "ROOM",
                        "nullable": true
                    },
                    "status": {
                        "description": "Feature status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "inactive",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateInventoryRequest": {
                "title": "Update Inventory Request",
                "description": "Request body for updating an existing inventory item. Note: Inventory items cannot be assigned during update. Use dedicated assignment endpoints instead.",
                "properties": {
                    "item_type": {
                        "description": "Type of inventory item",
                        "type": "string",
                        "enum": [
                            "furniture",
                            "appliance",
                            "linen",
                            "electronic",
                            "kitchenware",
                            "decoration"
                        ],
                        "example": "furniture",
                        "nullable": true
                    },
                    "status": {
                        "description": "Item status",
                        "type": "string",
                        "enum": [
                            "in_use",
                            "in_storage",
                            "maintenance",
                            "disposed"
                        ],
                        "example": "maintenance",
                        "nullable": true
                    },
                    "tracking_number": {
                        "description": "Unique tracking number for the item",
                        "type": "string",
                        "example": "FRN-2024-002",
                        "nullable": true
                    },
                    "brand": {
                        "description": "Item brand",
                        "type": "string",
                        "example": "Modern Furniture+",
                        "nullable": true
                    },
                    "model": {
                        "description": "Item model",
                        "type": "string",
                        "example": "Executive Chair",
                        "nullable": true
                    },
                    "purchase_date": {
                        "description": "Date when the item was purchased",
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01",
                        "nullable": true
                    },
                    "warranty_end": {
                        "description": "Date when the warranty expires",
                        "type": "string",
                        "format": "date",
                        "example": "2027-03-01",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UpdateRoomRequest": {
                "title": "Update Room Request",
                "description": "Request body for updating an existing room",
                "properties": {
                    "room_number": {
                        "description": "Room number",
                        "type": "string",
                        "maxLength": 50,
                        "example": "102",
                        "nullable": true
                    },
                    "floor": {
                        "description": "Floor number",
                        "type": "integer",
                        "example": 2,
                        "nullable": true
                    },
                    "capacity": {
                        "description": "Room capacity",
                        "type": "integer",
                        "example": 3,
                        "nullable": true
                    },
                    "room_type": {
                        "description": "Room type",
                        "type": "string",
                        "enum": [
                            "STANDARD",
                            "SUITE",
                            "DELUXE"
                        ],
                        "example": "SUITE",
                        "nullable": true
                    },
                    "status": {
                        "description": "Room status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "maintenance"
                        ],
                        "example": "maintenance",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "BedResource": {
                "title": "Bed Resource",
                "description": "Bed resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "room_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "bed_number": {
                        "type": "string",
                        "example": "A1"
                    },
                    "bed_type": {
                        "type": "string",
                        "enum": [
                            "SINGLE",
                            "DOUBLE",
                            "BUNK"
                        ],
                        "example": "SINGLE"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "available",
                            "occupied",
                            "maintenance",
                            "reserved"
                        ],
                        "example": "available"
                    },
                    "guest_id": {
                        "type": "integer",
                        "example": 1,
                        "nullable": true
                    },
                    "inventory_items_count": {
                        "type": "integer",
                        "example": 2,
                        "nullable": true
                    },
                    "room": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RoomResource"
                            }
                        ],
                        "nullable": true,
                        "type": "object"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureResource"
                        },
                        "nullable": true
                    },
                    "inventory_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryResource"
                        },
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "FeatureResource": {
                "title": "Feature Resource",
                "description": "Feature resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "WiFi"
                    },
                    "code": {
                        "type": "string",
                        "example": "WIFI"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "ROOM",
                            "BED",
                            "APART",
                            "MIXED"
                        ],
                        "example": "ROOM"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "assignments_count": {
                        "type": "integer",
                        "example": 5,
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "InventoryResource": {
                "title": "Inventory Resource",
                "description": "Inventory item resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "description": "ID of the tenant this item belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "assignable_type": {
                        "description": "Type of object this item is assigned to",
                        "type": "string",
                        "example": "App\\\\Modules\\\\Room\\\\Models\\\\Room",
                        "nullable": true
                    },
                    "assignable_id": {
                        "description": "ID of the object this item is assigned to",
                        "type": "integer",
                        "example": 5,
                        "nullable": true
                    },
                    "item_type": {
                        "description": "Type of inventory item",
                        "type": "string",
                        "enum": [
                            "furniture",
                            "appliance",
                            "linen",
                            "electronic",
                            "kitchenware",
                            "decoration"
                        ],
                        "example": "furniture"
                    },
                    "status": {
                        "description": "Item status",
                        "type": "string",
                        "enum": [
                            "in_use",
                            "in_storage",
                            "maintenance",
                            "disposed"
                        ],
                        "example": "in_use"
                    },
                    "tracking_number": {
                        "description": "Unique tracking number",
                        "type": "string",
                        "example": "FRN-2024-001"
                    },
                    "brand": {
                        "description": "Item brand",
                        "type": "string",
                        "example": "Modern Furniture"
                    },
                    "model": {
                        "description": "Item model",
                        "type": "string",
                        "example": "Office Chair"
                    },
                    "purchase_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-01"
                    },
                    "warranty_end": {
                        "type": "string",
                        "format": "date",
                        "example": "2027-03-01"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "RoomResource": {
                "title": "Room Resource",
                "description": "Room resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "apart_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "room_number": {
                        "type": "string",
                        "example": "101"
                    },
                    "floor": {
                        "type": "integer",
                        "example": 1
                    },
                    "capacity": {
                        "type": "integer",
                        "example": 2
                    },
                    "room_type": {
                        "type": "string",
                        "enum": [
                            "STANDARD",
                            "SUITE",
                            "DELUXE"
                        ],
                        "example": "STANDARD"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "maintenance"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "beds_count": {
                        "type": "integer",
                        "example": 2
                    },
                    "beds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BedResource"
                        }
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeatureResource"
                        }
                    },
                    "apart": {
                        "$ref": "#/components/schemas/ApartResource"
                    }
                },
                "type": "object"
            },
            "ApartListResponse": {
                "title": "Apart List Response",
                "description": "Response format for apart list endpoint",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApartResource"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/PaginationMeta"
                    },
                    "links": {
                        "$ref": "#/components/schemas/PaginationLinks"
                    }
                },
                "type": "object"
            },
            "ApartSingleResponse": {
                "title": "Apart Single Response",
                "description": "Response format for single apart endpoints",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": true
                    },
                    "data": {
                        "$ref": "#/components/schemas/ApartResource"
                    },
                    "message": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateApartRequest": {
                "title": "Create Apart Request",
                "description": "Request body for creating a new apart",
                "required": [
                    "firm_id",
                    "name",
                    "address",
                    "gender_type",
                    "opening_date",
                    "status"
                ],
                "properties": {
                    "firm_id": {
                        "description": "ID of the firm this apart belongs to",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the apart",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Apart 101"
                    },
                    "address": {
                        "description": "Physical address of the apart",
                        "type": "string",
                        "example": "123 Main St, City"
                    },
                    "gender_type": {
                        "description": "Gender type of the apart",
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "MIXED"
                        ],
                        "example": "MIXED"
                    },
                    "opening_date": {
                        "description": "Opening date of the apart",
                        "type": "string",
                        "format": "date",
                        "example": "2024-02-15"
                    },
                    "status": {
                        "description": "Status of the apart",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "CreateFirmRequest": {
                "title": "Create Firm Request",
                "description": "Request body for creating a new firm",
                "required": [
                    "name",
                    "tax_number",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the firm",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Example Firm"
                    },
                    "tax_number": {
                        "description": "Tax number of the firm",
                        "type": "string",
                        "maxLength": 20,
                        "example": "1234567890"
                    },
                    "status": {
                        "description": "Status of the firm",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "CreateTenantRequest": {
                "title": "Create Tenant Request",
                "description": "Request body for creating a new tenant",
                "required": [
                    "name",
                    "domain",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the tenant",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Example Tenant"
                    },
                    "domain": {
                        "description": "Domain of the tenant",
                        "type": "string",
                        "maxLength": 255,
                        "example": "example.com"
                    },
                    "settings": {
                        "description": "Settings for the tenant",
                        "type": "object",
                        "example": {
                            "theme": "light",
                            "language": "tr"
                        },
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the tenant",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateApartRequest": {
                "title": "Update Apart Request",
                "description": "Request body for updating an existing apart",
                "required": [
                    "name",
                    "address",
                    "gender_type",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the apart",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Updated Apart Name"
                    },
                    "address": {
                        "description": "Physical address of the apart",
                        "type": "string",
                        "example": "456 New St, Istanbul"
                    },
                    "gender_type": {
                        "description": "Gender type of the apart",
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "MIXED"
                        ],
                        "example": "FEMALE"
                    },
                    "opening_date": {
                        "description": "Opening date of the apart",
                        "type": "string",
                        "format": "date",
                        "example": "2024-03-15"
                    },
                    "status": {
                        "description": "Status of the apart",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "UpdateTenantRequest": {
                "title": "Update Tenant Request",
                "description": "Request body for updating an existing tenant",
                "properties": {
                    "name": {
                        "description": "Name of the tenant",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Updated Example Tenant",
                        "nullable": true
                    },
                    "domain": {
                        "description": "Domain of the tenant",
                        "type": "string",
                        "maxLength": 255,
                        "example": "updated-example.com",
                        "nullable": true
                    },
                    "settings": {
                        "description": "Settings for the tenant",
                        "type": "object",
                        "example": {
                            "theme": "dark",
                            "language": "en"
                        },
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the tenant",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "inactive",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ApartResource": {
                "title": "Apart Resource",
                "description": "Apart resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "firm_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Apart 101"
                    },
                    "address": {
                        "type": "string",
                        "example": "123 Main St, City"
                    },
                    "gender_type": {
                        "type": "string",
                        "enum": [
                            "MALE",
                            "FEMALE",
                            "MIXED"
                        ],
                        "example": "MIXED"
                    },
                    "opening_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-02-15"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "rooms_count": {
                        "type": "integer",
                        "example": 5
                    },
                    "firm": {
                        "$ref": "#/components/schemas/FirmResource"
                    }
                },
                "type": "object"
            },
            "FirmResource": {
                "title": "Firm Resource",
                "description": "Firm resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tenant_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Example Firm"
                    },
                    "tax_number": {
                        "type": "string",
                        "example": "1234567890"
                    },
                    "address": {
                        "type": "string",
                        "example": "Örnek Mah. Test Sok. No:1 Kadıköy/İstanbul"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+90 555 123 4567"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "info@ornekfirma.com"
                    },
                    "tax_office": {
                        "type": "string",
                        "example": "Kadıköy Vergi Dairesi"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "deleted_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "aparts_count": {
                        "type": "integer",
                        "example": 5
                    },
                    "aparts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApartResource"
                        }
                    },
                    "tenant": {
                        "$ref": "#/components/schemas/TenantResource"
                    }
                },
                "type": "object"
            },
            "TenantResource": {
                "title": "Tenant Resource",
                "description": "Tenant resource representation",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Example Tenant"
                    },
                    "domain": {
                        "type": "string",
                        "example": "example.com"
                    },
                    "settings": {
                        "type": "object",
                        "example": {
                            "theme": "light",
                            "language": "tr"
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "firms_count": {
                        "type": "integer",
                        "example": 3
                    },
                    "firms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FirmResource"
                        }
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "Unauthorized": {
                "description": "Unauthorized access",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Unauthorized"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "Forbidden": {
                "description": "Forbidden access",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Forbidden"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "NotFound": {
                "description": "Resource not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Not found"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ValidationError": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "message": {
                                    "type": "string",
                                    "example": "The given data was invalid"
                                },
                                "errors": {
                                    "type": "object",
                                    "example": {
                                        "field": [
                                            "The field is required."
                                        ]
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "jwt": {
                "type": "http",
                "description": "JWT token authentication",
                "name": "Authorization",
                "in": "header",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "API Endpoints for user authentication and authorization"
        },
        {
            "name": "Roles",
            "description": "API Endpoints for role management"
        },
        {
            "name": "Permissions",
            "description": "API Endpoints for permission management"
        },
        {
            "name": "Tenants",
            "description": "API Endpoints for tenant management"
        },
        {
            "name": "Firms",
            "description": "API Endpoints for managing firms"
        },
        {
            "name": "Guests",
            "description": "API Endpoints for guest management"
        },
        {
            "name": "Guest Guardians",
            "description": "API Endpoints for guest guardian management"
        },
        {
            "name": "Guest Guardian History",
            "description": "API Endpoints for guest guardian history management"
        },
        {
            "name": "Seasons",
            "description": "API Endpoints for season management"
        },
        {
            "name": "Season Registrations",
            "description": "API Endpoints for season registration management"
        },
        {
            "name": "Products",
            "description": "API Endpoints for product management"
        },
        {
            "name": "Product Categories",
            "description": "API Endpoints for product category management"
        },
        {
            "name": "Payment Plans",
            "description": "API endpoints for payment plan management"
        },
        {
            "name": "Payments",
            "description": "API Endpoints for payment management"
        },
        {
            "name": "Payment Types",
            "description": "API Endpoints for payment type management"
        },
        {
            "name": "Invoices",
            "description": "API endpoints for managing invoices"
        },
        {
            "name": "Notifications",
            "description": "API Endpoints for notification management"
        },
        {
            "name": "Notification Templates",
            "description": "API Endpoints for notification template management"
        },
        {
            "name": "Notification Channels",
            "description": "API Endpoints for notification channel management"
        },
        {
            "name": "Announcements",
            "description": "API Endpoints for announcement management"
        },
        {
            "name": "Addresses",
            "description": "API Endpoints for managing addresses"
        },
        {
            "name": "Countries",
            "description": "API Endpoints for managing countries"
        },
        {
            "name": "Districts",
            "description": "API Endpoints for managing districts"
        },
        {
            "name": "Provinces",
            "description": "API Endpoints for managing provinces"
        },
        {
            "name": "Users",
            "description": "API Endpoints for user management"
        },
        {
            "name": "People",
            "description": "API Endpoints for people management"
        },
        {
            "name": "Account Transactions",
            "description": "API Endpoints for managing account transactions"
        },
        {
            "name": "Company Integration",
            "description": "API endpoints for company integration operations"
        },
        {
            "name": "Currencies",
            "description": "API Endpoints for currencies management"
        },
        {
            "name": "Deposit Deductions",
            "description": "API endpoints for managing deposit deductions"
        },
        {
            "name": "Discount Categories",
            "description": "API endpoints for managing discount categories"
        },
        {
            "name": "Discount Rules",
            "description": "API endpoints for managing discount rules"
        },
        {
            "name": "Exchange Rates",
            "description": "API Endpoints for exchange rates management"
        },
        {
            "name": "Invoice Details",
            "description": "API endpoints for managing invoice details"
        },
        {
            "name": "Invoice Titles",
            "description": "API Endpoints for invoice title management"
        },
        {
            "name": "Payment Type Categories",
            "description": "API Endpoints for payment type category management"
        },
        {
            "name": "Prices",
            "description": "API Endpoints for price management"
        },
        {
            "name": "Reports",
            "description": "API endpoints for generating and retrieving reports"
        },
        {
            "name": "Report Templates",
            "description": "API endpoints for managing report templates"
        },
        {
            "name": "Season Registration Products",
            "description": "API Endpoints for season registration product management"
        },
        {
            "name": "Season Registration Product Discounts",
            "description": "API endpoints for managing discounts applied to season registration products"
        },
        {
            "name": "Tax Types",
            "description": "API Endpoints for tax type management"
        },
        {
            "name": "Access Logs",
            "description": "API Endpoints for guest access logs"
        },
        {
            "name": "Documents",
            "description": "API Endpoints for document management"
        },
        {
            "name": "Document Types",
            "description": "API Endpoints for document type management"
        },
        {
            "name": "3. Beds",
            "description": "API Endpoints for bed management"
        },
        {
            "name": "4. Features",
            "description": "API Endpoints for feature management (rooms, beds and aparts)"
        },
        {
            "name": "5. Inventory",
            "description": "API Endpoints for inventory management. Note: Inventory assignment must be done through dedicated endpoints (assign-to-bed, assign-to-room, assign-to-apart)"
        },
        {
            "name": "2. Rooms",
            "description": "API Endpoints for room management"
        },
        {
            "name": "1. Aparts",
            "description": "API Endpoints for apart management"
        },
        {
            "name": "Dashboard",
            "description": "Dashboard"
        }
    ],
    "security": [
        {
            "jwt": []
        }
    ]
}